IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[DBO].[MOB_REUBICACION_PALLET]') AND type in (N'P', N'PC'))
DROP PROCEDURE [DBO].[MOB_REUBICACION_PALLET]
GO

CREATE PROCEDURE [DBO].[MOB_REUBICACION_PALLET](
	@NROPALLET		VARCHAR(100),
	@POS_COD		VARCHAR(45) OUTPUT,
	@POS_OR			VARCHAR(45)=NULL
)
AS
BEGIN
  DECLARE @CLIENTEID 		AS VARCHAR(15)
  DECLARE @PRODUCTOID		AS VARCHAR(30)
  DECLARE @VCANT 		    AS NUMERIC(20)
  ----VARIABLES PARA HACER INSERT
  DECLARE @POSICION_ID 		AS NUMERIC(20,0)
  DECLARE @POSICION_COD 	AS VARCHAR(45)
  DECLARE @NAVE_ID			AS NUMERIC(20,0)
  DECLARE @ORDEN_LOCATOR 	AS NUMERIC(6)
  DECLARE @CASO				AS INT
  DECLARE @ALTURA			AS NUMERIC(10,3)
  DECLARE @ALTO_PALLET		AS NUMERIC(6,3) --FIJO ES LA ALTURA DEL PALLET APROX 20 CM
  DECLARE @MULTIPROD		NUMERIC(20,0)
  DECLARE @VPOS_EVAL		NUMERIC(20,0)
  DECLARE @FLG_VOL_PESO		CHAR(1)
  DECLARE @MSG				VARCHAR(1000)
  DECLARE @CANT_WHILE		NUMERIC(20)
  DECLARE @DOCUMENTO_ID		NUMERIC(20,0)
  DECLARE @NRO_LINEA		NUMERIC(10,0)

BEGIN

	SELECT	@MULTIPROD=COUNT(DD.NRO_LINEA)
	FROM	DET_DOCUMENTO DD INNER JOIN DET_DOCUMENTO_TRANSACCION DDT	ON(DD.DOCUMENTO_ID=DDT.DOCUMENTO_ID AND DD.NRO_LINEA=DDT.NRO_LINEA_DOC)
			INNER JOIN RL_DET_DOC_TRANS_POSICION RL						ON(RL.DOC_TRANS_ID=DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS=DDT.NRO_LINEA_TRANS)
			INNER JOIN NAVE N											ON(RL.NAVE_ACTUAL=N.NAVE_ID AND ISNULL(N.ZONA_PRE_PICKING,'0')='1')
	WHERE	DD.PROP1=@NROPALLET

	SELECT	TOP 1
			@DOCUMENTO_ID=DD.DOCUMENTO_ID, @NRO_LINEA=DD.NRO_LINEA
	FROM	DET_DOCUMENTO DD INNER JOIN DET_DOCUMENTO_TRANSACCION DDT	ON(DD.DOCUMENTO_ID=DDT.DOCUMENTO_ID AND DD.NRO_LINEA=DDT.NRO_LINEA_DOC)
			INNER JOIN RL_DET_DOC_TRANS_POSICION RL						ON(RL.DOC_TRANS_ID=DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS=DDT.NRO_LINEA_TRANS)
			INNER JOIN NAVE N											ON(RL.NAVE_ACTUAL=N.NAVE_ID AND ISNULL(N.ZONA_PRE_PICKING,'0')='1')
	WHERE	DD.PROP1=@NROPALLET

	IF @MULTIPROD >1 BEGIN
		SET @MULTIPROD=1
	END 
	ELSE BEGIN
		SET @MULTIPROD=0
	END

	SELECT	@FLG_VOL_PESO=ISNULL(C.FLG_ING_VOL_PESO,'0')
	FROM	DOCUMENTO D INNER JOIN CLIENTE_PARAMETROS C	ON(D.CLIENTE_ID=C.CLIENTE_ID)
	WHERE	D.DOCUMENTO_ID=@DOCUMENTO_ID
	
	
	SELECT 	@CLIENTEID=DD.CLIENTE_ID,@PRODUCTOID=DD.PRODUCTO_ID
	FROM 	DET_DOCUMENTO DD INNER JOIN DOCUMENTO D
			ON (DD.DOCUMENTO_ID=D.DOCUMENTO_ID)
			INNER JOIN DET_DOCUMENTO_TRANSACCION DDT
			ON(DDT.DOCUMENTO_ID=DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC=DD.NRO_LINEA)
			INNER JOIN RL_DET_DOC_TRANS_POSICION RL
			ON(RL.DOC_TRANS_ID=DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS=DDT.NRO_LINEA_TRANS)
			INNER JOIN NAVE N
			ON(RL.NAVE_ACTUAL=N.NAVE_ID)
	WHERE	DD.PROP1=UPPER(LTRIM(RTRIM(@NROPALLET)))


	BEGIN
		IF @MULTIPROD=0 BEGIN
			SELECT 	@VCANT=COUNT(*)
			FROM 	RL_PRODUCTO_POSICION_PERMITIDA
			WHERE 	CLIENTE_ID=@CLIENTEID AND PRODUCTO_ID=@PRODUCTOID
		END
		ELSE
		BEGIN
			SET @VCANT=0
		END
		
		SELECT @ALTO_PALLET = ISNULL(CONVERT(NUMERIC(6,3),VALOR), 0.20) FROM SYS_PARAMETRO_PROCESO WHERE PROCESO_ID = 'WMOV' AND SUBPROCESO_ID = 'UBIC_PALLET' AND PARAMETRO_ID = 'ALT_BASE_PALLET'
		--SELECT @ALTURA      = ((ALTO * @CANT)+ @ALTO_PALLET) FROM PRODUCTO WHERE PRODUCTO_ID = @PRODUCTOID
		
		IF CURSOR_STATUS('global','CUR_POS')>=-1 BEGIN
			DEALLOCATE CUR_POS
		END
	
		IF @VCANT>0 BEGIN

			--ARMO CURSOR PARA LAS POSICIONES PERMITIDAS.
			DECLARE CUR_POS CURSOR FOR
			SELECT	ISNULL(R.POSICION_ID,R.NAVE_ID)
			FROM 	RL_PRODUCTO_POSICION_PERMITIDA R LEFT JOIN POSICION P
					ON(R.POSICION_ID=P.POSICION_ID)
					LEFT JOIN NAVE N
					ON(R.NAVE_ID=P.NAVE_ID)
			WHERE 	1=1
					AND R.CLIENTE_ID=@CLIENTEID 
					AND R.PRODUCTO_ID=@PRODUCTOID
					AND P.POS_VACIA='1'
					AND P.POS_LOCKEADA='0'
					AND ((@POS_OR IS NULL)OR(P.POSICION_COD NOT IN(@POS_OR)))
			ORDER BY
					ISNULL(P.ORDEN_LOCATOR,99999)				
					
		END ELSE BEGIN
			--ARMO POSICIONES TOTALES, PORQUE NO TIENE POSICIONES PERMITIDAS O ES UN MULTIPRODUCTO.
			DECLARE CUR_POS CURSOR FOR
			SELECT	X.POSICION_ID
			FROM	(	SELECT	POSICION_ID, ORDEN_LOCATOR
						FROM	POSICION P
						WHERE	P.POS_VACIA='1'
								AND P.POS_LOCKEADA='0'
								AND NOT EXISTS (SELECT 1 FROM RL_DET_DOC_TRANS_POSICION R WHERE R.POSICION_ACTUAL=P.POSICION_ID)
								AND ((@POS_OR IS NULL)OR(P.POSICION_COD NOT IN(@POS_OR)))
						UNION ALL
						SELECT	NAVE_ID,99999
						FROM	NAVE N
						WHERE	N.DISP_INGRESO='1' 
								AND N.PRE_INGRESO='0' 
								AND N.PRE_EGRESO='0'
								--AND NOT EXISTS (SELECT 1 FROM RL_DET_DOC_TRANS_POSICION R WHERE R.NAVE_ACTUAL=N.NAVE_ID)
								AND ((@POS_OR IS NULL)OR(N.NAVE_COD NOT IN(@POS_OR)))
					)X
			ORDER BY
					ISNULL(X.ORDEN_LOCATOR,99999)

		END
		
		IF @VCANT > 0
		BEGIN
			OPEN CUR_POS
			FETCH NEXT FROM CUR_POS INTO @VPOS_EVAL
			WHILE (@@FETCH_STATUS=0) OR (@CASO IS NOT NULL) BEGIN	
			

										
				SELECT  TOP 1
						 @POSICION_ID   =X.POSICION_ID
						,@POSICION_COD  =X.POSICION_COD
						,@NAVE_ID       =X.NAVE_ID
						,@ORDEN_LOCATOR =X.ORDENLOCATOR
						,@CASO          =X1
				FROM(   SELECT   P.POSICION_ID					AS POSICION_ID
								,P.POSICION_COD					AS POSICION_COD
								,NULL							AS NAVE_ID
								,ISNULL(P.ORDEN_LOCATOR,99999)	AS ORDENLOCATOR
								,1								AS X1
								,ISNULL(X.CONT_UBIC,0)			AS CONT_UBIC
						FROM 	POSICION P INNER JOIN
								RL_PRODUCTO_POSICION_PERMITIDA RLPP
								ON(P.POSICION_ID=RLPP.POSICION_ID)
								LEFT JOIN(  SELECT	COUNT(P.COLUMNA_ID)CONT_UBIC, P.COLUMNA_ID
											FROM	POSICION P INNER JOIN RL_DET_DOC_TRANS_POSICION RL
													ON(P.POSICION_ID=RL.POSICION_ACTUAL) INNER JOIN
													RL_PRODUCTO_POSICION_PERMITIDA RLPP2
													ON(RL.POSICION_ACTUAL=RLPP2.POSICION_ID)
											WHERE   RL.POSICION_ACTUAL IS NOT NULL
													AND RLPP2.PRODUCTO_ID=LTRIM(RTRIM(UPPER(@PRODUCTOID)))
													AND RLPP2.CLIENTE_ID=LTRIM(RTRIM(UPPER(@CLIENTEID)))
											GROUP BY
													P.COLUMNA_ID
								)X ON(X.COLUMNA_ID=P.COLUMNA_ID)                        
						WHERE	P.POS_VACIA='1' 
								AND P.POS_LOCKEADA='0'
								AND P.POSICION_ID NOT IN(SELECT 	ISNULL(POSICION_ID,0)FROM SYS_LOCATOR_ING)
								AND RLPP.PRODUCTO_ID=LTRIM(RTRIM(UPPER(@PRODUCTOID))) 
								AND RLPP.CLIENTE_ID=LTRIM(RTRIM(UPPER(@CLIENTEID)))
								AND ((@FLG_VOL_PESO='0')OR([dbo].[TRANSFERENCIA_PALLET_PESO](@DOCUMENTO_ID,@NRO_LINEA,@NROPALLET,P.POSICION_ID)='1'))
								AND ((@FLG_VOL_PESO='0')OR([dbo].[TRANSFERENCIA_PALLET_VOLUMEN](@DOCUMENTO_ID,@NRO_LINEA,@NROPALLET,P.POSICION_ID)='1'))
								AND RLPP.POSICION_ID=@VPOS_EVAL
						UNION ALL
						SELECT 	 NULL							AS POSICION_ID
								,N.NAVE_COD						AS POSICION_COD
								,N.NAVE_ID						AS NAVE_ID
								,ISNULL(N.ORDEN_LOCATOR,99999)	AS ORDENLOCATOR
								,0								AS X1
								,0								AS CONT_UBIC
						FROM 	NAVE N INNER JOIN
								RL_PRODUCTO_POSICION_PERMITIDA RLPP
								ON(N.NAVE_ID=RLPP.NAVE_ID)
						WHERE	N.DISP_INGRESO='1' AND N.PRE_INGRESO='0' 
								AND PRE_EGRESO='0'
								AND RLPP.PRODUCTO_ID=LTRIM(RTRIM(UPPER(@PRODUCTOID)))
								AND RLPP.CLIENTE_ID=LTRIM(RTRIM(UPPER(@CLIENTEID)))
								AND RLPP.NAVE_ID=@VPOS_EVAL
				)AS X
				ORDER BY 
						ISNULL(X.CONT_UBIC,0) DESC,X.ORDENLOCATOR ASC
				
				IF @POSICION_COD IS NOT NULL BEGIN
					BREAK
				END
				
				FETCH NEXT FROM CUR_POS INTO @VPOS_EVAL
				
			END --FIN (@@FETCH_STATUS=0) OR (@POSICION_ID IS NOT NULL)
		END		
		ELSE
		BEGIN
			
			OPEN CUR_POS
			FETCH NEXT FROM CUR_POS INTO @VPOS_EVAL
			WHILE (@@FETCH_STATUS=0) OR (@CASO IS NOT NULL) BEGIN	

			
				SELECT   TOP 1
						 @POSICION_ID	=X.POSICION_ID
						,@POSICION_COD	=X.POSICION_COD
						,@NAVE_ID		=X.NAVE_ID
						,@ORDEN_LOCATOR	=X.ORDENLOCATOR
						,@CASO			=X1
				FROM(   SELECT 	 P.POSICION_ID  AS POSICION_ID
								,POSICION_COD AS POSICION_COD
								,NULL AS NAVE_ID
								,ISNULL(ORDEN_LOCATOR,99999) AS ORDENLOCATOR
								,1 AS X1
								,X.CONT_UBIC
						FROM 	POSICION P 
								LEFT JOIN RL_DET_DOC_TRANS_POSICION TP 
								ON (P.POSICION_ID = TP.POSICION_ACTUAL)
								LEFT JOIN(  SELECT	COUNT(P.COLUMNA_ID)CONT_UBIC, P.COLUMNA_ID
											FROM	POSICION P INNER JOIN RL_DET_DOC_TRANS_POSICION RL
													ON(P.POSICION_ID=RL.POSICION_ACTUAL) 
													INNER JOIN DET_DOCUMENTO_TRANSACCION DDT
													ON(RL.DOC_TRANS_ID=DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS=DDT.NRO_LINEA_TRANS)
													INNER JOIN DET_DOCUMENTO DD
													ON(DDT.DOCUMENTO_ID=DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC=DD.NRO_LINEA)
											WHERE   RL.POSICION_ACTUAL IS NOT NULL
													AND DD.PRODUCTO_ID=LTRIM(RTRIM(UPPER(@PRODUCTOID)))
													AND DD.CLIENTE_ID=LTRIM(RTRIM(UPPER(@CLIENTEID)))
													AND P.POSICION_ID=@VPOS_EVAL 
											GROUP BY
													P.COLUMNA_ID
								)X ON(X.COLUMNA_ID=P.COLUMNA_ID)                          
						WHERE	P.POS_VACIA='1' AND P.POS_LOCKEADA='0'
								AND ((@FLG_VOL_PESO='0')OR([dbo].[TRANSFERENCIA_PALLET_PESO](@DOCUMENTO_ID,@NRO_LINEA,@NROPALLET,P.POSICION_ID)='1'))
								AND ((@FLG_VOL_PESO='0')OR([dbo].[TRANSFERENCIA_PALLET_VOLUMEN](@DOCUMENTO_ID,@NRO_LINEA,@NROPALLET,P.POSICION_ID)='1'))
								AND P.POSICION_ID NOT IN(	SELECT POSICION_ID FROM SYS_LOCATOR_ING)
								AND TP.POSICION_ACTUAL IS NULL
								AND P.POSICION_ID=@VPOS_EVAL 
						UNION ALL
						SELECT 	 NULL AS POSICION_ID
								,NAVE_COD AS POSICION_COD
								,NAVE_ID  AS NAVE_ID
								,ISNULL(ORDEN_LOCATOR,99999) AS ORDENLOCATOR
								,0 AS X1
								,NULL CONT_UBIC
						FROM 	NAVE N
						WHERE	N.DISP_INGRESO='1' 
								AND N.PRE_INGRESO='0' 
								AND PRE_EGRESO='0'
								AND NAVE_TIENE_LAYOUT='0'
								AND N.NAVE_ID=@VPOS_EVAL 
					)AS X
				ORDER BY 
					 ISNULL(X.CONT_UBIC,0) DESC,X.ORDENLOCATOR
	                 
				FETCH NEXT FROM CUR_POS INTO @VPOS_EVAL
				
				IF @POSICION_COD IS NOT NULL BEGIN
					BREAK
				END
				
			END --FIN (@@FETCH_STATUS=0) OR (@POSICION_ID IS NOT NULL)
                
		END
		
	
		IF @CASO=1
		BEGIN
			
			IF @POSICION_ID IS NULL AND @NAVE_ID IS NULL
			BEGIN
				RAISERROR('-1021 SQL - NO QUEDAN UBICACIONES DISPONIBLES PARA UBICAR EL PALLET.',16,1)
			END

		END
		ELSE
		BEGIN

			IF @POSICION_ID IS NULL AND @NAVE_ID IS NULL
			BEGIN
				RAISERROR('-1021 SQL - NO QUEDAN UBICACIONES DISPONIBLES PARA UBICAR EL PALLET.',16,1)
			END

		END

		
	END
	END

	SET @POS_COD=@POSICION_COD

END