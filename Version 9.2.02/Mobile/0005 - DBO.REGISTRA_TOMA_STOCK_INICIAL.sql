/****** Object:  StoredProcedure [dbo].[REGISTRA_TOMA_STOCK_INICIAL]    Script Date: 10/30/2014 10:28:42 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[REGISTRA_TOMA_STOCK_INICIAL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[REGISTRA_TOMA_STOCK_INICIAL]
GO

CREATE PROCEDURE [dbo].[REGISTRA_TOMA_STOCK_INICIAL]
	@UBICACION		VARCHAR(45),
	@CLIENTE_ID		VARCHAR(15),
	@PRODUCTO_ID	VARCHAR(30),
	@CANTIDAD		NUMERIC(20,5),
	@NRO_LOTE		VARCHAR(50),
	@NRO_PARTIDA	VARCHAR(50),
	@VALIDA_SKU		CHAR(1),
	@USUARIO_ID		VARCHAR(50)
AS
BEGIN
	DECLARE @NAVE_COD		VARCHAR(15);
	DECLARE @CALLE_COD		VARCHAR(15);
	DECLARE @COLUMNA_COD	VARCHAR(15);
	DECLARE @NIVEL_COD		VARCHAR(15);
	DECLARE @CONTROL		NUMERIC(20,0);
	DECLARE @TERMINAL		VARCHAR(100);
	
	SET @TERMINAL='IP: ' + CAST(CONNECTIONPROPERTY('client_net_address')AS VARCHAR) + ' - TERMINAL: ' + HOST_NAME();
	
	--	1. DETERMINO SI ES POSICION O NAVE.
	SELECT	@CONTROL=COUNT(*)
	FROM	POSICION
	WHERE	POSICION_COD=@UBICACION;
	
	IF @CONTROL=0
	BEGIN
		--ES UNA NAVE
		SELECT	@NAVE_COD=NAVE_COD
		FROM	NAVE
		WHERE	NAVE_COD=@UBICACION;
	
	END 
	ELSE
	BEGIN
		--	2. DESCOMPONGO LA POSICION O NAVE PARA QUE QUEDE CORRECTAMENTE ARMADO.	
		SELECT	@NAVE_COD=N.NAVE_COD, @CALLE_COD=CAN.CALLE_COD, @COLUMNA_COD=CN.COLUMNA_COD,@NIVEL_COD=NN.NIVEL_COD
		FROM	POSICION P INNER JOIN NIVEL_NAVE NN	ON(P.NIVEL_ID=NN.NIVEL_ID)
				INNER JOIN COLUMNA_NAVE CN			ON(P.COLUMNA_ID=CN.COLUMNA_ID)
				INNER JOIN CALLE_NAVE CAN			ON(P.CALLE_ID=CAN.CALLE_ID)
				INNER JOIN NAVE N					ON(P.NAVE_ID=N.NAVE_ID)
		WHERE	P.POSICION_COD=@UBICACION
	
	END

	SET @CONTROL=0
	
	SELECT	@CONTROL=COUNT(*)
	FROM	MOB_TOMA_STOCK_INICIAL
	WHERE	CLIENTE_ID=@CLIENTE_ID
			AND PRODUCTO_ID=@PRODUCTO_ID
			AND UBICACION=@UBICACION
			--AND ((@NRO_LOTE IS NULL)OR(NRO_LOTE=@NRO_LOTE))
			--AND ((@NRO_PARTIDA IS NULL)OR(NRO_PARTIDA=@NRO_PARTIDA))
			AND (ISNULL(NRO_LOTE,'#000000')=ISNULL(@NRO_LOTE,'#000000'))
			AND (ISNULL(NRO_PARTIDA,'#000000')=ISNULL(@NRO_PARTIDA,'#000000'))

	IF @CONTROL=0 
	BEGIN
	
		INSERT INTO MOB_TOMA_STOCK_INICIAL(	NAVE, CALLE, COLUMNA, NIVEL,UBICACION,CLIENTE_ID, PRODUCTO_ID, CANTIDAD, NRO_LOTE, NRO_PARTIDA,VALIDA_SKU,
											USUARIO_ID, TERMINAL, F_INSERT)
		VALUES(	@NAVE_COD, @CALLE_COD, @COLUMNA_COD, @NIVEL_COD,@UBICACION,@CLIENTE_ID,@PRODUCTO_ID,@CANTIDAD,@NRO_LOTE, @NRO_PARTIDA,@VALIDA_SKU,
				@USUARIO_ID,@TERMINAL, GETDATE());
	
	END
	ELSE
	BEGIN
		UPDATE	MOB_TOMA_STOCK_INICIAL
		SET		CANTIDAD=CANTIDAD + @CANTIDAD,
				F_UPDATE=GETDATE()
		WHERE	CLIENTE_ID=@CLIENTE_ID
				AND PRODUCTO_ID=@PRODUCTO_ID
				AND UBICACION=@UBICACION
				AND ((@NRO_LOTE IS NULL)OR(NRO_LOTE=@NRO_LOTE))
				AND ((@NRO_PARTIDA IS NULL)OR(NRO_PARTIDA=@NRO_PARTIDA))		
	END
END

	/*
	--IDENTITY PARA IDENTIFICAR LOS REGISTROS.
	STOCK_ID	NUMERIC(30,0) NOT NULL IDENTITY(1,1),
	--REFERIDO A LAS POSICIONES.
	NAVE		VARCHAR(45),
	CALLE		VARCHAR(45),
	COLUMNA		VARCHAR(45),
	NIVEL		VARCHAR(45),
	--REFERIDO AL PRODUCTO.
	CLIENTE_ID	VARCHAR(15),
	PRODUCTO_ID	VARCHAR(30),
	CANTIDAD	NUMERIC(20,5),
	NRO_LOTE	VARCHAR(50),
	NRO_PARTIDA	VARCHAR(50),
	--REFERIDO A LA AUDITORIA.
	VALIDA_SKU	CHAR(1),
	USUARIO_ID	VARCHAR(50),
	TERMINAL	VARCHAR(100),
	F_INSERT	DATETIME,
	F_UPDATE	DATETIME
	*/
GO