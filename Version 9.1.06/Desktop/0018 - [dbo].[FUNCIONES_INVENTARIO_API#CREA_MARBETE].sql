
/****** Object:  StoredProcedure [dbo].[FUNCIONES_INVENTARIO_API#CREA_MARBETE]    Script Date: 03/27/2014 11:38:30 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FUNCIONES_INVENTARIO_API#CREA_MARBETE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[FUNCIONES_INVENTARIO_API#CREA_MARBETE]
GO

/****** Object:  StoredProcedure [dbo].[FUNCIONES_INVENTARIO_API#CREA_MARBETE]    Script Date: 03/27/2014 11:38:30 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[FUNCIONES_INVENTARIO_API#CREA_MARBETE]
@INVENTARIO_ID  NUMERIC(20,0) output,
@POSICION		VARCHAR(100) output,
@CLIENTE_ID		VARCHAR(100) output,
@PRODUCTO_ID	VARCHAR(100) output,
@CANTIDAD		NUMERIC(20,5) output,
@NRO_LOTE		VARCHAR(100)=NULL output,
@NRO_PARTIDA	VARCHAR(100)=NULL output,
@OBSERVACION	VARCHAR(4000) output
AS
BEGIN


DECLARE @NAVE_ID AS NUMERIC(20,0)
DECLARE @POSICION_ID AS NUMERIC(20,0)
DECLARE @MARBETE AS NUMERIC(20,0)
DECLARE @CONTEO AS NUMERIC(20,0)
DECLARE @EXISTE AS NUMERIC(20,0)
declare @V_lockgraba AS VARCHAR(1) 
DECLARE @USA_LOTE AS VARCHAR(1) 
DECLARE @USA_PARTIDA AS VARCHAR(1) 

BEGIN TRY
		SET XACT_ABORT ON

		IF @NRO_LOTE = '' SET @NRO_LOTE = NULL

		IF @NRO_PARTIDA = '' SET @NRO_PARTIDA = NULL
		
		
		BEGIN TRAN

		SELECT @CONTEO = NRO_CONTEO FROM INVENTARIO WHERE INVENTARIO_ID = @INVENTARIO_ID

		SELECT @V_lockgraba = lockgraba FROM INVENTARIO WHERE INVENTARIO_ID = @INVENTARIO_ID

		IF @V_lockgraba = '1' 
		BEGIN
			RAISERROR ('1- Se a cerrado el ingreso del conteo.',16,1)
			RETURN
		END


		--VERIFICO LA CONFIGURACION DE LA FAMILIA DE PRODUCTOS
		SELECT @EXISTE=COUNT(*) FROM DET_INVENTARIO_FAM_PROD WHERE INVENTARIO_ID = @INVENTARIO_ID
		IF @EXISTE>0
		BEGIN
			SELECT @EXISTE=COUNT(*) FROM DET_INVENTARIO_FAM_PROD FAM
				INNER JOIN PRODUCTO P ON (P.FAMILIA_ID = FAM.FAMILIA_ID)
			WHERE FAM.INVENTARIO_ID = @INVENTARIO_ID
				AND P.PRODUCTO_ID = @PRODUCTO_ID

			IF @EXISTE = 0 RAISERROR('EL PRODUCTO NO PERTENECE A UNA FAMILIA DE PRODUCTOS CONFIGURADO EN EL INVENTARIO',15,1)
				

		END

		SELECT @EXISTE = COUNT(*) FROM NAVE WHERE NAVE_COD = @POSICION

		IF @EXISTE <> 0 
		BEGIN 
			SELECT @NAVE_ID = NAVE_ID FROM NAVE WHERE NAVE_COD = @POSICION
		END
		IF @EXISTE = 0 
		BEGIN
			SELECT @POSICION_ID = POSICION_ID FROM POSICION WHERE POSICION_COD = @POSICION
		END


		--VERIFICO QUE EXISTA LA POSICION
		IF @NAVE_ID IS NULL AND @POSICION_ID IS NULL
		BEGIN
			RAISERROR('LA POSICION NO EXISTE',15,1)
		END

		--VERIFICO LA CONFIGURACION DE LA POSICION
		SELECT @EXISTE=COUNT(*) FROM DET_INVENTARIO_CONF_POS WHERE INVENTARIO_ID = @INVENTARIO_ID
		IF @EXISTE>0
		BEGIN
			SELECT @EXISTE=COUNT(*) FROM DET_INVENTARIO_CONF_POS POS
			WHERE POS.INVENTARIO_ID = @INVENTARIO_ID
				AND (POS.POSICION_ID = @POSICION_ID OR POS.NAVE_ID = @NAVE_ID)

			IF @EXISTE = 0 RAISERROR('LA POSICION NO SE ENCUENTRA CONFIGURADA EN EL INVENTARIO',15,1)
		END


		--VERIFICO SI USA NRO_LOTE Y NRO_PARTIDA

		SELECT @USA_LOTE = ingLoteProveedor FROM PRODUCTO WHERE CLIENTE_ID = @CLIENTE_ID AND PRODUCTO_ID = @PRODUCTO_ID

		SELECT @USA_PARTIDA = ingPartida FROM PRODUCTO WHERE CLIENTE_ID = @CLIENTE_ID AND PRODUCTO_ID = @PRODUCTO_ID
		
		IF @USA_LOTE = '1' AND @NRO_LOTE IS NULL RAISERROR('EL PRODUCTO REQUIERE EL INGRESO DE UN NRO DE LOTE',15,1)

		IF @USA_PARTIDA = '1' AND @NRO_PARTIDA IS NULL RAISERROR('EL PRODUCTO REQUIERE EL INGRESO DE UN NRO DE PARTIDA',15,1)
			

		--VERIFICO QUE NO ESTE YA CARGADO ESE PRODUCTO EN ESA POSICION
		
		SELECT @EXISTE=COUNT(*) 
			FROM DET_INVENTARIO 
			WHERE INVENTARIO_ID = @INVENTARIO_ID
			AND PRODUCTO_ID = @PRODUCTO_ID
			AND (NAVE_ID = @NAVE_ID OR POSICION_ID =@POSICION_ID)
			AND ((@NRO_LOTE IS NULL AND NRO_LOTE IS NULL) OR  NRO_LOTE = @NRO_LOTE)
			AND ((@NRO_PARTIDA IS NULL AND NRO_PARTIDA IS NULL) OR NRO_PARTIDA = @NRO_PARTIDA)

		IF @EXISTE > 0 RAISERROR('EL PRODUCTO YA SE ENCUENTRA CARGADO EN ESTE INVENTARIO',15,1)
		

		SELECT @MARBETE =  MAX(MARBETE) + 1 FROM DET_CONTEO WHERE INVENTARIO_ID = @INVENTARIO_ID

		INSERT INTO DET_INVENTARIO
				   (INVENTARIO_ID
				   ,MARBETE
				   ,NAVE_ID
				   ,POSICION_ID
				   ,CLIENTE_ID
				   ,PRODUCTO_ID
				   ,CANTIDAD
				   ,POS_LOCKEADA
				   ,MODO_INGRESO
				   --,CANT_STOCK_CONT_1
				   ,NRO_LOTE
				   ,NRO_PARTIDA)
			 VALUES
				   (@INVENTARIO_ID,
				   @MARBETE,
				   @NAVE_ID,
				   @POSICION_ID,
				   @CLIENTE_ID,
				   @PRODUCTO_ID,
				   @CANTIDAD,
				   '0',
				   'M',
				   --@CANTIDAD,
				   @NRO_LOTE,
				   @NRO_PARTIDA)
				   
		INSERT INTO DET_INVENTARIO_AJU 
					(INVENTARIO_ID
					,MARBETE,NAVE_ID
					,POSICION_ID
					,CLIENTE_ID
					,PRODUCTO_ID
					,CANT_AJU
					,OBS_AJU
					,PROCESADO
					,PROCESADO2)
			VALUES 
					(@INVENTARIO_ID,
					@MARBETE,
					@NAVE_ID,
					@POSICION_ID,
					@CLIENTE_ID,
					@PRODUCTO_ID,
					@CANTIDAD,
					'NUEVO MARBETE',
					'N',
					NULL)

		IF @CONTEO = 1
		BEGIN

		INSERT INTO DET_CONTEO (
			INVENTARIO_ID,
			MARBETE,
			NAVE_ID,
			POSICION_ID,
			CLIENTE_ID,
			PRODUCTO_ID,
			CONTEO1,
			OBSCONTEO1,
			CONTEO2,
			OBSCONTEO2,	
			CONTEO3,
			OBSCONTEO3)
		VALUES(
			@INVENTARIO_ID,
			@MARBETE,
			@NAVE_ID,
			@POSICION_ID,
			@CLIENTE_ID,
			@PRODUCTO_ID,
			@CANTIDAD,
			@OBSERVACION,
			NULL,
			NULL,
			NULL,
			NULL)
		END

		IF @CONTEO = 2
		BEGIN

		INSERT INTO DET_CONTEO (
			INVENTARIO_ID,
			MARBETE,
			NAVE_ID,
			POSICION_ID,
			CLIENTE_ID,
			PRODUCTO_ID,
			CONTEO1,
			OBSCONTEO1,
			CONTEO2,
			OBSCONTEO2,	
			CONTEO3,
			OBSCONTEO3)
		VALUES(
			@INVENTARIO_ID,
			@MARBETE,
			@NAVE_ID,
			@POSICION_ID,
			@CLIENTE_ID,
			@PRODUCTO_ID,
			NULL,
			NULL,
			@CANTIDAD,
			@OBSERVACION,
			NULL,
			NULL)
		END

		IF @CONTEO = 3
		BEGIN

		INSERT INTO DET_CONTEO (
			INVENTARIO_ID,
			MARBETE,
			NAVE_ID,
			POSICION_ID,
			CLIENTE_ID,
			PRODUCTO_ID,
			CONTEO1,
			OBSCONTEO1,
			CONTEO2,
			OBSCONTEO2,	
			CONTEO3,
			OBSCONTEO3)
		VALUES(
			@INVENTARIO_ID,
			@MARBETE,
			@NAVE_ID,
			@POSICION_ID,
			@CLIENTE_ID,
			@PRODUCTO_ID,
			NULL,
			NULL,
			NULL,
			NULL,
			@CANTIDAD,
			@OBSERVACION)
		END
	COMMIT
END TRY
BEGIN CATCH
	IF XACT_STATE() <> 0 ROLLBACK TRAN 
    EXEC usp_RethrowError;
END CATCH
	
END


GO


