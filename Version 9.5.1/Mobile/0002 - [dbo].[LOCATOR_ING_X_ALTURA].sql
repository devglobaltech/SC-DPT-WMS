/****** Object:  StoredProcedure [dbo].[LOCATOR_ING_X_ALTURA]    Script Date: 04/21/2015 10:19:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LOCATOR_ING_X_ALTURA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LOCATOR_ING_X_ALTURA]
GO

CREATE PROCEDURE [dbo].[LOCATOR_ING_X_ALTURA]
  @DOCUMENTO_ID		AS NUMERIC(20),
  @NRO_LINEA		AS NUMERIC(20),
  @NROPALLET 		AS VARCHAR(100),
  @CANT			    AS NUMERIC(5,0) -- CANTDAD DE CAJAS APILADAS EN EL PALLET
AS
  DECLARE @CLIENTEID 		AS VARCHAR(15)
  DECLARE @PRODUCTOID		AS VARCHAR(30)
  DECLARE @VCANT 		    AS NUMERIC(20)
  ----VARIABLES PARA HACER INSERT
  DECLARE @POSICION_ID 		AS NUMERIC(20,0)
  DECLARE @POSICION_COD 	AS VARCHAR(45)
  DECLARE @NAVE_ID			AS NUMERIC(20,0)
  DECLARE @ORDEN_LOCATOR 	AS NUMERIC(6)
  DECLARE @CASO				AS INT
  DECLARE @ALTURA			AS NUMERIC(10,3)
  DECLARE @ALTO_PALLET		AS NUMERIC(6,3) --FIJO ES LA ALTURA DEL PALLET APROX 20 CM
  DECLARE @MULTIPROD		NUMERIC(20,0)
	
BEGIN

	SELECT	@MULTIPROD=COUNT(NRO_LINEA)
	FROM	DET_DOCUMENTO
	WHERE	PROP1=@NROPALLET
	
	IF @MULTIPROD >1 BEGIN
		SET @MULTIPROD=1
	END 
	ELSE BEGIN
		SET @MULTIPROD=0
	END
	
	IF @DOCUMENTO_ID IS NULL
	BEGIN
			RAISERROR ('EL PARAMETRO @DOCUMENTO_ID NO PUEDE SER NULO. SQLSERVER', 16, 1)
	END
	IF @NRO_LINEA IS NULL
	BEGIN
			RAISERROR ('EL PARAMETRO @NRO_LINEA NO PUEDE SER NULO. SQLSERVER', 16, 1)			
	END
	IF @NROPALLET IS NULL
	BEGIN
			RAISERROR ('EL PARAMETRO @NROPALLET NO PUEDE SER NULO. SQLSERVER', 16, 1)			
	END

	IF @CANT IS NULL
	BEGIN
			RAISERROR ('EL PARAMETRO @CANT NO PUEDE SER NULO. SQLSERVER', 16, 1)			
	END

	DELETE FROM SYS_LOCATOR_ING WHERE POSICION_ID IS NULL AND NAVE_ID IS NULL
	DELETE FROM SYS_LOCATOR_ING WHERE DOCUMENTO_ID=@DOCUMENTO_ID AND NRO_LINEA=@NRO_LINEA;

	SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
	
	SELECT 	@CLIENTEID=DD.CLIENTE_ID,@PRODUCTOID=DD.PRODUCTO_ID
	FROM 	DET_DOCUMENTO DD INNER JOIN DOCUMENTO D
			ON (DD.DOCUMENTO_ID=D.DOCUMENTO_ID)
			INNER JOIN DET_DOCUMENTO_TRANSACCION DDT
			ON(DDT.DOCUMENTO_ID=DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC=DD.NRO_LINEA)
			INNER JOIN RL_DET_DOC_TRANS_POSICION RL
			ON(RL.DOC_TRANS_ID=DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS=DDT.NRO_LINEA_TRANS)
			INNER JOIN NAVE N
			ON(RL.NAVE_ACTUAL=N.NAVE_ID)
	WHERE	DD.PROP1=UPPER(LTRIM(RTRIM(@NROPALLET)))
			AND D.STATUS IN('D30','D35')
			AND (N.PRE_INGRESO='1' OR N.INTERMEDIA='1')

	BEGIN
		IF @MULTIPROD=0 BEGIN
			SELECT 	@VCANT=COUNT(*)
			FROM 	RL_PRODUCTO_POSICION_PERMITIDA
			WHERE 	CLIENTE_ID=@CLIENTEID AND PRODUCTO_ID=@PRODUCTOID
		END
		ELSE
		BEGIN
			PRINT('SEBAS')
			SET @VCANT=0
		END
		
		SELECT @ALTO_PALLET = ISNULL(CONVERT(NUMERIC(6,3),VALOR), 0.20) FROM SYS_PARAMETRO_PROCESO WHERE PROCESO_ID = 'WMOV' AND SUBPROCESO_ID = 'UBIC_PALLET' AND PARAMETRO_ID = 'ALT_BASE_PALLET'
		SELECT @ALTURA      = ((ALTO * @CANT)+ @ALTO_PALLET) FROM PRODUCTO WHERE PRODUCTO_ID = @PRODUCTOID
				
	
		IF @VCANT > 0
		BEGIN
			SELECT  TOP 1
					 @POSICION_ID   =X.POSICION_ID
					,@POSICION_COD  =X.POSICION_COD
					,@NAVE_ID       =X.NAVE_ID
					,@ORDEN_LOCATOR =X.ORDENLOCATOR
					,@CASO          =X1
			FROM(   SELECT   P.POSICION_ID					AS POSICION_ID
					        ,P.POSICION_COD					AS POSICION_COD
					        ,NULL							AS NAVE_ID
					        ,ISNULL(P.ORDEN_LOCATOR,99999)	AS ORDENLOCATOR
					        ,1								AS X1
							,ISNULL(X.CONT_UBIC,0)			AS CONT_UBIC
				    FROM 	POSICION P INNER JOIN
						    RL_PRODUCTO_POSICION_PERMITIDA RLPP
							ON(P.POSICION_ID=RLPP.POSICION_ID)
							LEFT JOIN(  SELECT	COUNT(P.COLUMNA_ID)CONT_UBIC, P.COLUMNA_ID
										FROM	POSICION P INNER JOIN RL_DET_DOC_TRANS_POSICION RL
												ON(P.POSICION_ID=RL.POSICION_ACTUAL) INNER JOIN
												RL_PRODUCTO_POSICION_PERMITIDA RLPP2
												ON(RL.POSICION_ACTUAL=RLPP2.POSICION_ID)
										WHERE   RL.POSICION_ACTUAL IS NOT NULL
												AND RLPP2.PRODUCTO_ID=LTRIM(RTRIM(UPPER(@PRODUCTOID)))
												AND RLPP2.CLIENTE_ID=LTRIM(RTRIM(UPPER(@CLIENTEID)))
										GROUP BY
												P.COLUMNA_ID
							)X ON(X.COLUMNA_ID=P.COLUMNA_ID)                        
					WHERE	P.POS_VACIA='1' AND P.POS_LOCKEADA='0'
							AND P.POSICION_ID NOT IN(SELECT 	ISNULL(POSICION_ID,0)FROM SYS_LOCATOR_ING)
							AND RLPP.PRODUCTO_ID=LTRIM(RTRIM(UPPER(@PRODUCTOID))) 
							AND RLPP.CLIENTE_ID=LTRIM(RTRIM(UPPER(@CLIENTEID)))
							AND DBO.GUARDADO_PALLET_INGRESO_PESO(@DOCUMENTO_ID,@NRO_LINEA,@NROPALLET,P.POSICION_ID)='1'
							AND DBO.GUARDADO_PALLET_INGRESO_VOLUMEN(@DOCUMENTO_ID,@NRO_LINEA,@NROPALLET,P.POSICION_ID)='1'
							--AND ((@ALTURA IS NULL) OR (@ALTURA <= P.ALTO))
					UNION ALL
					SELECT 	 NULL							AS POSICION_ID
							,N.NAVE_COD						AS POSICION_COD
							,N.NAVE_ID						AS NAVE_ID
							,ISNULL(N.ORDEN_LOCATOR,99999)	AS ORDENLOCATOR
							,0								AS X1
							,0								AS CONT_UBIC
					FROM 	NAVE N INNER JOIN
							RL_PRODUCTO_POSICION_PERMITIDA RLPP
							ON(N.NAVE_ID=RLPP.NAVE_ID)
					WHERE	N.DISP_INGRESO='1' AND N.PRE_INGRESO='0' 
							AND PRE_EGRESO='0'
							AND RLPP.PRODUCTO_ID=LTRIM(RTRIM(UPPER(@PRODUCTOID)))
							AND RLPP.CLIENTE_ID=LTRIM(RTRIM(UPPER(@CLIENTEID)))
			)AS X
			ORDER BY 
					ISNULL(X.CONT_UBIC,0) DESC,X.ORDENLOCATOR ASC
		END		
		ELSE
		BEGIN
			SELECT   TOP 1
					 @POSICION_ID=X.POSICION_ID
					,@POSICION_COD=X.POSICION_COD
					,@NAVE_ID=X.NAVE_ID
					,@ORDEN_LOCATOR=X.ORDENLOCATOR
					,@CASO=X1
			FROM(   SELECT 	 P.POSICION_ID  AS POSICION_ID
							,POSICION_COD AS POSICION_COD
							,NULL AS NAVE_ID
							,ISNULL(ORDEN_LOCATOR,99999) AS ORDENLOCATOR
							,1 AS X1
							,X.CONT_UBIC
					FROM 	POSICION P 
							LEFT JOIN RL_DET_DOC_TRANS_POSICION TP 
							ON (P.POSICION_ID = TP.POSICION_ACTUAL)
							LEFT JOIN(  SELECT	COUNT(P.COLUMNA_ID)CONT_UBIC, P.COLUMNA_ID
										FROM	POSICION P INNER JOIN RL_DET_DOC_TRANS_POSICION RL
												ON(P.POSICION_ID=RL.POSICION_ACTUAL) 
												INNER JOIN DET_DOCUMENTO_TRANSACCION DDT
												ON(RL.DOC_TRANS_ID=DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS=DDT.NRO_LINEA_TRANS)
												INNER JOIN DET_DOCUMENTO DD
												ON(DDT.DOCUMENTO_ID=DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC=DD.NRO_LINEA)
										WHERE   RL.POSICION_ACTUAL IS NOT NULL
												AND DD.PRODUCTO_ID=LTRIM(RTRIM(UPPER(@PRODUCTOID)))
												AND DD.CLIENTE_ID=LTRIM(RTRIM(UPPER(@CLIENTEID)))
										GROUP BY
												P.COLUMNA_ID
							)X ON(X.COLUMNA_ID=P.COLUMNA_ID)                          
					WHERE	P.POS_VACIA='1' AND P.POS_LOCKEADA='0'
							AND DBO.GUARDADO_PALLET_INGRESO_PESO(@DOCUMENTO_ID,@NRO_LINEA,@NROPALLET,P.POSICION_ID)='1'
							AND DBO.GUARDADO_PALLET_INGRESO_VOLUMEN(@DOCUMENTO_ID,@NRO_LINEA,@NROPALLET,P.POSICION_ID)='1'
							AND P.POSICION_ID NOT IN(	SELECT POSICION_ID FROM SYS_LOCATOR_ING)
							AND TP.POSICION_ACTUAL IS NULL
					UNION ALL
					SELECT 	 NULL AS POSICION_ID
							,NAVE_COD AS POSICION_COD
							,NAVE_ID  AS NAVE_ID
							,ISNULL(ORDEN_LOCATOR,99999) AS ORDENLOCATOR
							,0 AS X1
							,NULL CONT_UBIC
					FROM 	NAVE N
					WHERE	N.DISP_INGRESO='1' 
							AND N.PRE_INGRESO='0' 
							AND PRE_EGRESO='0'
							AND NAVE_TIENE_LAYOUT='0'
				)AS X
			ORDER BY 
                 ISNULL(X.CONT_UBIC,0) DESC,X.ORDENLOCATOR
		END
		
		BEGIN TRANSACTION
		IF @CASO=1
		BEGIN
			DELETE FROM SYS_LOCATOR_ING WHERE DOCUMENTO_ID=@DOCUMENTO_ID AND NRO_LINEA=@NRO_LINEA
			IF @POSICION_ID IS NULL AND @NAVE_ID IS NULL
			BEGIN
				RAISERROR('-1021 SQL - NO QUEDAN UBICACIONES DISPONIBLES PARA UBICAR EL PALLET.',16,1)
			END

			INSERT INTO  SYS_LOCATOR_ING (DOCUMENTO_ID, NRO_LINEA, NRO_PALLET, POSICION_ID)
			VALUES (@DOCUMENTO_ID, @NRO_LINEA, @NROPALLET, @POSICION_ID )
		END
		ELSE
		BEGIN
			DELETE FROM SYS_LOCATOR_ING WHERE DOCUMENTO_ID=@DOCUMENTO_ID AND NRO_LINEA=@NRO_LINEA

			IF @POSICION_ID IS NULL AND @NAVE_ID IS NULL
			BEGIN
				RAISERROR('-1021 SQL - NO QUEDAN UBICACIONES DISPONIBLES PARA UBICAR EL PALLET.',16,1)
			END

			INSERT INTO  SYS_LOCATOR_ING (DOCUMENTO_ID, NRO_LINEA, NRO_PALLET, NAVE_ID)
			VALUES (@DOCUMENTO_ID, @NRO_LINEA, @NROPALLET, @NAVE_ID )
		END
		COMMIT TRANSACTION
		SELECT 	@POSICION_ID	AS POSICION_ID, 
				@POSICION_COD	AS POSICION_COD,
				@NAVE_ID		AS NAVE_ID, 
				@ORDEN_LOCATOR	AS ORDEN_LOCATOR		
	END
END




GO


