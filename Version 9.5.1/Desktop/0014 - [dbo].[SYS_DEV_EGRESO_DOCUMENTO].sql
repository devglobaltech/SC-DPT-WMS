
/****** Object:  StoredProcedure [dbo].[SYS_DEV_EGRESO_DOCUMENTO]    Script Date: 10/20/2015 10:53:39 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SYS_DEV_EGRESO_DOCUMENTO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[SYS_DEV_EGRESO_DOCUMENTO]
GO

CREATE PROCEDURE [dbo].[SYS_DEV_EGRESO_DOCUMENTO]

	@DOCUMENTO_ID NUMERIC(20,0)
	
AS
	DECLARE @QTY			AS NUMERIC(10,0)
	DECLARE @DOC_EXT		AS VARCHAR(100)
	DECLARE @CLI			AS VARCHAR(30)
	DECLARE @CTLPALLET		AS CHAR(1)
	DECLARE @CTLDESC		AS CHAR(1)
	DECLARE @CTLEXP			AS CHAR(1)
	DECLARE @ERRORSAVE		AS INT
	DECLARE @USUARIO 		AS VARCHAR(20)
	
BEGIN

	BEGIN TRY

		IF EXISTS (SELECT 1 FROM SYS_DEV_DET_DOCUMENTO WHERE DOCUMENTO_ID = @DOCUMENTO_ID)
			RETURN

		--CONTROLO QUE EL VIAJE TENGA TODOS LOS PICKING'S CERRADOS
		SET @QTY=0
		SELECT @QTY=COUNT(PICKING_ID) FROM PICKING WHERE (FIN_PICKING IN ('0','1') OR FIN_PICKING IS NULL) AND DOCUMENTO_ID = @DOCUMENTO_ID
		IF (@QTY>0) 
		BEGIN
			RAISERROR('AUN QUEDAN PRODUCTOS PENDIENTES POR PICKEAR',16,1)
			RETURN 	
		END --IF
		
		--CONTROLO QUE NO QUEDEN EN SYS_INT_DET_DOCUMENTO PRODUCTOS PENDIENTES 
		SELECT @DOC_EXT = DOC_EXT FROM SYS_DEV_DET_DOCUMENTO WHERE DOCUMENTO_ID = @DOCUMENTO_ID
		
		SET @QTY=0
		SELECT @QTY=COUNT(DD.DOC_EXT) 
		FROM SYS_INT_DET_DOCUMENTO DD 
			INNER JOIN SYS_INT_DOCUMENTO D ON (DD.CLIENTE_ID=D.CLIENTE_ID AND DD.DOC_EXT=D.DOC_EXT)		
			INNER JOIN PRODUCTO PROD ON (DD.CLIENTE_ID=PROD.CLIENTE_ID AND DD.PRODUCTO_ID=PROD.PRODUCTO_ID)
		WHERE DD.ESTADO_GT IS NULL AND DD.DOC_EXT=@DOC_EXT
		IF (@QTY>0) BEGIN
			RAISERROR('EL PEDIDO AUN TIENE PRODUCTOS PENDIENTES POR PROCESAR',16,1)
			RETURN 	
		END --IF
		
		SELECT @CLI=CLIENTE_ID FROM PICKING(NOLOCK) WHERE DOCUMENTO_ID = @DOCUMENTO_ID
		
		SELECT	@CTLPALLET=ISNULL(FLG_CONTROL_PICKING,'0'),
				@CTLDESC=ISNULL(FLG_DESCONSOLIDACION,'0'),
				@CTLEXP=ISNULL(FLG_CONTROL_EXP,'0')
		FROM	CLIENTE_PARAMETROS 
		WHERE	CLIENTE_ID=@CLI
		
		--CONTROL PALLET		
		IF @CTLPALLET='1'
		BEGIN
			SELECT	@QTY=COUNT(PALLET_CONTROLADO)
			FROM	PICKING (NOLOCK)
			WHERE 	DOCUMENTO_ID=@DOCUMENTO_ID
					AND CLIENTE_ID=@CLI
					AND PALLET_CONTROLADO='0'
			IF @QTY>0
			BEGIN
				RAISERROR('AUN QUEDAN PALLETS DE PICKING POR CONTROLAR',16,1)
				RETURN
			END
		END
		
		--CONTROL DESCONSOLIDACION			
		IF @CTLDESC='1'
		BEGIN
			SELECT	@QTY=COUNT(ISNULL(ESTADO,'0')) 
			FROM	PICKING 
			WHERE	DOCUMENTO_ID=@DOCUMENTO_ID
					AND ISNULL(ESTADO,'0')<>'2' 
					AND CLIENTE_ID=@CLI
			HAVING	SUM(CANT_CONFIRMADA)>0			
			IF @QTY>0
			BEGIN
				RAISERROR('ES OBLIGATORIO REALIZAR LA DESCONSOLIDACION DEL PICKING.',16,1)
				RETURN 	
			END --IF
		END				
		
		--CONTROL EXPEDICION
		IF @CTLEXP='1'
		BEGIN
			SELECT	@QTY=COUNT(ST_CONTROL_EXP) 
			FROM	PICKING
			WHERE	DOCUMENTO_ID=@DOCUMENTO_ID
					AND ST_CONTROL_EXP='0' 
					AND CLIENTE_ID=@CLI
			HAVING	SUM(CANT_CONFIRMADA)>0
			IF @QTY>0 
			BEGIN			
				RAISERROR('AUN QUEDAN PALLETS PENDIENTES DE CARGAR A CAMION',16,1)
				RETURN 	
			END --IF
		END

		INSERT INTO SYS_DEV_DOCUMENTO
		SELECT	DISTINCT 
				SID.CLIENTE_ID, 
				CASE WHEN SID.TIPO_DOCUMENTO_ID='E04' THEN 'E05' WHEN SID.TIPO_DOCUMENTO_ID='E08' THEN 'E09' ELSE SID.TIPO_DOCUMENTO_ID END, 
				SID.CPTE_PREFIJO, 
				SID.CPTE_NUMERO, 
				GETDATE(), --FECHA_CPTE, 
				SID.FECHA_SOLICITUD_CPTE, 
				SID.AGENTE_ID, 
				DBO.GET_PESO_TOTAL(SID.CLIENTE_ID,SID.CODIGO_VIAJE), --SID.PESO_TOTAL, 
				SID.UNIDAD_PESO, 
				SID.VOLUMEN_TOTAL, 
				SID.UNIDAD_VOLUMEN, 
				DBO.GET_CANT_BULTOS(SID.CLIENTE_ID,SID.CODIGO_VIAJE), --SID.TOTAL_BULTOS, 
				SID.ORDEN_DE_COMPRA, 
				SID.OBSERVACIONES, 
				CAST(D.CPTE_PREFIJO AS VARCHAR(20)) + CAST(D.CPTE_NUMERO  AS VARCHAR(20)), 
				SID.NRO_DESPACHO_IMPORTACION, 
				SID.DOC_EXT, 
				SID.CODIGO_VIAJE, 
				SID.INFO_ADICIONAL_1, 
				SID.INFO_ADICIONAL_2, 
				SID.INFO_ADICIONAL_3, 
				D.TIPO_COMPROBANTE_ID, 	
				NULL, 
				NULL, 
				'P', 
				GETDATE(),
				NULL, --FLG_MOVIMIENTO 
				SID.CUSTOMS_1,
				SID.CUSTOMS_2,
				SID.CUSTOMS_3,
				NULL AS NRO_GUIA,
				NULL AS IMPORTE_FLETE,
				NULL AS TRANSPORTISTA_ID,
				SID.INFO_ADICIONAL_4,
				SID.INFO_ADICIONAL_5,
				SID.INFO_ADICIONAL_6
		FROM	SYS_INT_DOCUMENTO SID
				INNER JOIN SYS_INT_DET_DOCUMENTO SIDD ON (SID.DOC_EXT = SIDD.DOC_EXT AND SID.CLIENTE_ID = SIDD.CLIENTE_ID)
				INNER JOIN DOCUMENTO D ON (SIDD.CLIENTE_ID=D.CLIENTE_ID AND SIDD.DOCUMENTO_ID = D.DOCUMENTO_ID)
		WHERE	D.DOCUMENTO_ID = @DOCUMENTO_ID
				AND NOT EXISTS (SELECT	1 
									FROM	SYS_DEV_DOCUMENTO SD 
									WHERE	SD.CLIENTE_ID=SID.CLIENTE_ID
											AND SD.DOC_EXT=SID.DOC_EXT)
		IF @@ERROR <> 0 BEGIN
			SET @ERRORSAVE = @@ERROR
			RAISERROR('ERROR AL INSERTAR EN SYS_DEV_DOCUMENTO, CODIGO_ERROR: %S',16,1,@ERRORSAVE)
			RETURN
		END

		INSERT INTO SYS_DEV_DET_DOCUMENTO
		SELECT	 DISTINCT
				 D.NRO_REMITO AS DOC_EXT
				,(P.PICKING_ID) AS NRO_LINEA
				,DD.CLIENTE_ID
				,DD.PRODUCTO_ID
				,ISNULL(DD.CANT_SOLICITADA,SIDD.CANTIDAD_SOLICITADA)
				,P.CANT_CONFIRMADA
				,DD.EST_MERC_ID
				,DD.CAT_LOG_ID_FINAL
				,NULL AS NRO_BULTO
				,DD.DESCRIPCION
				,DD.NRO_LOTE
				,DD.PROP1 AS NRO_PALLET
				,DD.FECHA_VENCIMIENTO
				,NULL AS NRO_DESPACHO
				,DD.NRO_PARTIDA
				,DD.UNIDAD_ID
				,NULL AS UNIDAD_CONTENEDORA_ID
				,NULL AS PESO
				,NULL AS UNIDAD_PESO
				,NULL AS VOLUMEN
				,NULL AS UNIDAD_VOLUMEN
				,DBO.GET_PROPERTY(DD.CLIENTE_ID,D.NRO_REMITO,DD.PRODUCTO_ID,1) AS PROP1
				,DBO.GET_PROPERTY(DD.CLIENTE_ID,D.NRO_REMITO,DD.PRODUCTO_ID,2) AS PROP2
				,DBO.GET_PROPERTY(DD.CLIENTE_ID,D.NRO_REMITO,DD.PRODUCTO_ID,3) AS PROP3
				,NULL AS LARGO
				,NULL AS ALTO
				,DD.NRO_LINEA AS ANCHO --NRO DE LINEA
				,NULL AS DOC_BACK_ORDER
				,NULL AS ESTADO
				,NULL AS FECHA_ESTADO
				,'P' AS ESTADO_GT
				,GETDATE() AS FECHA_ESTADO_GT
				,P.DOCUMENTO_ID
				,DBO.AJ_NAVECOD_TO_NAVE_ID(P.NAVE_COD) AS NAVE_ID
				,P.NAVE_COD	
				,NULL		--FLG_MOVIMIENTO
				,DBO.GET_SIDD_CUSTOMS(DD.CLIENTE_ID,D.NRO_REMITO,DD.PRODUCTO_ID,'1')
				,DBO.GET_SIDD_CUSTOMS(DD.CLIENTE_ID,D.NRO_REMITO,DD.PRODUCTO_ID,'2')
				,DBO.GET_SIDD_CUSTOMS(DD.CLIENTE_ID,D.NRO_REMITO,DD.PRODUCTO_ID,'3')
				,NULL AS NRO_CMR
		FROM 	DET_DOCUMENTO DD
				INNER JOIN DOCUMENTO D ON (DD.DOCUMENTO_ID=D.DOCUMENTO_ID)
				INNER JOIN PICKING P ON (DD.DOCUMENTO_ID=P.DOCUMENTO_ID AND DD.NRO_LINEA=P.NRO_LINEA)
				--JOIN AGREGADO PORQUE TREA MAS REGISTROS DADO QUE EXISTE OTRO DOCUMENTO EN LA TABLA DOCUMENTO QUE TIENE EL MISMO 
				INNER JOIN SYS_INT_DOCUMENTO SID ON (SID.CLIENTE_ID=D.CLIENTE_ID AND SID.DOC_EXT=D.NRO_REMITO)
				INNER JOIN SYS_INT_DET_DOCUMENTO SIDD ON(SIDD.DOCUMENTO_ID=DD.DOCUMENTO_ID AND SIDD.PRODUCTO_ID=DD.PRODUCTO_ID)
		WHERE	D.DOCUMENTO_ID = @DOCUMENTO_ID
				AND ((D.TIPO_OPERACION_ID IS NULL)OR(D.TIPO_OPERACION_ID='EGR'))
				AND NOT EXISTS (SELECT 1 
									FROM SYS_DEV_DET_DOCUMENTO 
									WHERE SYS_DEV_DET_DOCUMENTO.CLIENTE_ID = DD.CLIENTE_ID 
									AND SYS_DEV_DET_DOCUMENTO.DOC_EXT = D.NRO_REMITO 
									AND SYS_DEV_DET_DOCUMENTO.NRO_LINEA = P.PICKING_ID)

		IF @@ERROR <> 0 BEGIN
			SET @ERRORSAVE = @@ERROR
			RAISERROR('ERROR AL INSERTAR EN SYS_DEV_DET_DOCUMENTO, CODIGO_ERROR: %S',16,1,@ERRORSAVE)
			RETURN
		END
		  
		--INSERT LOS PRODUCTOS QUE NO INGRESARON EN EL DOCUMENTO POR FALTA DE STOCK
		INSERT INTO SYS_DEV_DET_DOCUMENTO
		SELECT	DISTINCT
				 DD.DOC_EXT
				,DD.NRO_LINEA
				,DD.CLIENTE_ID
				,DD.PRODUCTO_ID
				,DD.CANTIDAD_SOLICITADA
				,0
				,DD.EST_MERC_ID
				,DD.CAT_LOG_ID
				,DD.NRO_BULTO
				,DD.DESCRIPCION
				,DD.NRO_LOTE
				,DD.NRO_PALLET
				,DD.FECHA_VENCIMIENTO
				,DD.NRO_DESPACHO
				,DD.NRO_PARTIDA
				,DD.UNIDAD_ID
				,DD.UNIDAD_CONTENEDORA_ID
				,DD.PESO
				,DD.UNIDAD_PESO
				,DD.VOLUMEN
				,DD.UNIDAD_VOLUMEN
				,DD.PROP1
				,DD.PROP2
				,DD.PROP3
				,DD.LARGO
				,DD.ALTO
				,DD.ANCHO
				,DD.DOC_BACK_ORDER
				,NULL
				,NULL
				,DD.ESTADO_GT
				,GETDATE()
				,DD.DOCUMENTO_ID
				,DD.NAVE_ID
				,DD.NAVE_COD
				,NULL --FLG_MOVIMIENTO
				,DD.CUSTOMS_1
				,DD.CUSTOMS_2
				,DD.CUSTOMS_3 
				,NULL AS NRO_CMR
		FROM	SYS_INT_DET_DOCUMENTO DD
				INNER JOIN SYS_INT_DOCUMENTO D ON (D.CLIENTE_ID=DD.CLIENTE_ID AND D.DOC_EXT=DD.DOC_EXT)
		WHERE	CAST(DD.DOC_EXT + DD.PRODUCTO_ID AS VARCHAR(400))  NOT IN 
				(SELECT CAST(DOC_EXT + PRODUCTO_ID AS VARCHAR(400)) FROM SYS_DEV_DET_DOCUMENTO)
				AND DD.DOCUMENTO_ID = @DOCUMENTO_ID
				AND NOT EXISTS (SELECT 1 
									FROM SYS_DEV_DET_DOCUMENTO 
									WHERE SYS_DEV_DET_DOCUMENTO.CLIENTE_ID = DD.CLIENTE_ID 
									AND SYS_DEV_DET_DOCUMENTO.DOC_EXT = DD.DOC_EXT 
									AND SYS_DEV_DET_DOCUMENTO.NRO_LINEA = DD.NRO_LINEA)

		IF @@ERROR <> 0 BEGIN
			SET @ERRORSAVE = @@ERROR
			RAISERROR('ERROR AL INSERTAR EN SYS_DEV_DET_DOCUMENTO DE LOS PRODUCTOS SIN STOCK, CODIGO_ERROR: %S',16,1,@ERRORSAVE)
			RETURN
		END
		
		--SI FUE TODO BIEN Y NO SALTO POR ERROR HAGO EL UPDATE EN FACTURADO
		SELECT @USUARIO=USUARIO_ID FROM #TEMP_USUARIO_LOGGIN
		
		UPDATE 	PICKING 
		SET 	FACTURADO='1',
				FECHA_CONTROL_FAC=GETDATE(),
				USUARIO_CONTROL_FAC=@USUARIO,
				TERMINAL_CONTROL_FAC=HOST_NAME()
		WHERE 	DOCUMENTO_ID=@DOCUMENTO_ID
				AND ISNULL(FACTURADO,'0')='0'

		IF @@ERROR <> 0 BEGIN
			SET @ERRORSAVE = @@ERROR
			RAISERROR('ERROR AL REALIZAR LA ACTUALIZACION EN CIERRE DE PICKING, CODIGO_ERROR: %S',16,1,@ERRORSAVE)
			RETURN
		END		
		
	END TRY
	BEGIN CATCH
		EXEC USP_RETHROWERROR
	END CATCH
END

GO