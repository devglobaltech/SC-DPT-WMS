/****** OBJECT:  STOREDPROCEDURE [DBO].[LOCATOREGRESO]    SCRIPT DATE: 03/30/2015 10:42:47 ******/
IF  EXISTS (SELECT * FROM SYS.OBJECTS WHERE OBJECT_ID = OBJECT_ID(N'[ABAST_CONFIRMAR_ID]') AND TYPE IN (N'P', N'PC'))
DROP PROCEDURE [DBO].[ABAST_CONFIRMAR_ID]
GO

CREATE PROCEDURE [DBO].[ABAST_CONFIRMAR_ID]
@ABAST_ID		BIGINT			OUTPUT,
@USUARIO_ID		VARCHAR(100)	OUTPUT
AS
BEGIN
	/*	------------------------------------------------------------------
		DEFINICION DEL PROCESO.
		------------------------------------------------------------------
		1. CREAR CABECERA.
		2. CREAR DETALLE DE LA TRANSFERENCIA.
		3. ENLAZAR LAS EXISTENCIAS A LA TRANSFERENCIA
		4. HISTORICOS (ORIGEN)
		5. CAMBIAR DESTINO RL'S.
		6. CONFIRMAR TRANSFERENCIA Y CERRAR DOCUMENTO.	
		------------------------------------------------------------------
	*/
	DECLARE @EXISTE				NUMERIC(20,0)
	DECLARE @DOC_TRANS			NUMERIC(20,0)
	DECLARE @CUR_DD				CURSOR
	--PARA LA TABLA ABAST_CONSUMO_LOCATOR.
	DECLARE @NRO_LINEA			NUMERIC(20,0)
	DECLARE @CLIENTE_ID			VARCHAR(15)
	DECLARE @PRODUCTO_ID		VARCHAR(30)
	DECLARE @CANTIDAD			NUMERIC(20,5)
	DECLARE @RL_ID				NUMERIC(20,0)
	DECLARE @SALDO				NUMERIC(20,0)
	DECLARE @TIPO				VARCHAR(20)
	DECLARE @POSICION_ID		NUMERIC(20,0)
	DECLARE @POSICION_OR		NUMERIC(20,0)
	DECLARE @NAVE_OR			NUMERIC(20,0)
	DECLARE @CANT_ABASTECIDA	NUMERIC(20,5)
	DECLARE @CONTROL			NUMERIC(20,0)
	
	BEGIN TRY
	
		SELECT	@CONTROL=COUNT(*)
		FROM	ABAST_CONSUMO_LOCATOR
		WHERE	ABAST_ID=@ABAST_ID
				AND ISNULL(CANT_CONFIRMADA,CANTIDAD)<>CANTIDAD
				
		IF @CONTROL>0 BEGIN
		
			INSERT RL_DET_DOC_TRANS_POSICION
			SELECT	RL.DOC_TRANS_ID,
					RL.NRO_LINEA_TRANS,
					RL.POSICION_ANTERIOR,
					RL.POSICION_ACTUAL,
					A.CANTIDAD-A.CANT_CONFIRMADA,
					RL.TIPO_MOVIMIENTO_ID,
					RL.ULTIMA_ESTACION,
					RL.ULTIMA_SECUENCIA,
					RL.NAVE_ANTERIOR,
					RL.NAVE_ACTUAL,
					RL.DOCUMENTO_ID,
					RL.NRO_LINEA,
					'1',
					RL.DOC_TRANS_ID_EGR,
					RL.NRO_LINEA_TRANS_EGR,
					RL.DOC_TRANS_ID_TR,
					RL.NRO_LINEA_TRANS_TR,
					RL.CLIENTE_ID,
					RL.CAT_LOG_ID,
					RL.CAT_LOG_ID_FINAL,
					RL.EST_MERC_ID
			FROM	RL_DET_DOC_TRANS_POSICION RL INNER JOIN ABAST_CONSUMO_LOCATOR A
					ON(RL.RL_ID=A.RL_ID)
			WHERE	A.ABAST_ID=@ABAST_ID
					AND ISNULL(A.FINALIZADO,'0') IN('0','1')
					AND ISNULL(A.CANT_CONFIRMADA,A.CANTIDAD)<>A.CANTIDAD

			UPDATE	RL_DET_DOC_TRANS_POSICION
			SET		CANTIDAD=A.CANT_CONFIRMADA					
			FROM	RL_DET_DOC_TRANS_POSICION RL INNER JOIN ABAST_CONSUMO_LOCATOR A
					ON(RL.RL_ID=A.RL_ID)
			WHERE	A.ABAST_ID=@ABAST_ID
					AND ISNULL(A.FINALIZADO,'0') IN('0','1')
					AND ISNULL(A.CANT_CONFIRMADA,A.CANTIDAD)<>A.CANTIDAD					

		END
		
		SELECT	@EXISTE=COUNT(ABAST_ID)
		FROM	DET_ABASTECIMIENTO
		WHERE	ABAST_ID=@ABAST_ID
				AND FINALIZADO='1'
				
		IF @EXISTE>0 BEGIN
			RAISERROR ('LA TAREA DE ABASTECIMIENTO YA FUE CONFIRMADA.',16,1);
			RETURN
		END
		
		IF CURSOR_STATUS('global','@CUR_DD')>=-1
		BEGIN
			DEALLOCATE @CUR_DD
		END
		
		IF @USUARIO_ID IS NULL BEGIN
			SELECT 	@USUARIO_ID=USUARIO_ID FROM #TEMP_USUARIO_LOGGIN	
		END
		
		SELECT	@EXISTE = COUNT(*)
		FROM	TRANSACCION T
				INNER JOIN  RL_TRANSACCION_CLIENTE RTC  ON T.TRANSACCION_ID=RTC.TRANSACCION_ID
				INNER JOIN  RL_TRANSACCION_ESTACION RTE  ON T.TRANSACCION_ID=RTE.TRANSACCION_ID
				AND RTC.CLIENTE_ID IN (	SELECT	CLIENTE_ID 
										FROM	CLIENTE
										WHERE	(	SELECT (CASE WHEN (COUNT (CLIENTE_ID))> 0 THEN 1 ELSE 0 END) AS VALOR 
													FROM   RL_SYS_CLIENTE_USUARIO
													WHERE  CLIENTE_ID = RTC.CLIENTE_ID
															AND USUARIO_ID=LTRIM(RTRIM(UPPER(@USUARIO_ID)))) = 1)
		WHERE	T.TIPO_OPERACION_ID='TR' 
				AND RTE.ORDEN=1


		IF @EXISTE = 0
		BEGIN
			RAISERROR('El usuario %s no posee clientes asignados',16,1,@USUARIO_ID)
			RETURN
		END

		--1. CREAR CABECERA.
		
		EXEC CREAR_DOC_TRANSFERENCIA @USUARIO=@USUARIO_ID

		SET @DOC_TRANS=@@IDENTITY

		UPDATE DOCUMENTO_TRANSACCION SET TR_POS_COMPLETA= '0' WHERE DOC_TRANS_ID=@DOC_TRANS
		
		--2. CREAR DETALLE DE LA TRANSFERENCIA.
			
		SET @CUR_DD =CURSOR FOR
			SELECT	A.NRO_LINEA, A.CLIENTE_ID, A.PRODUCTO_ID, A.CANTIDAD, A.RL_ID, A.SALDO, A.TIPO, DA.POSICION_ID
			FROM	ABAST_CONSUMO_LOCATOR A INNER JOIN DET_ABASTECIMIENTO DA
					ON(A.ABAST_ID=DA.ABAST_ID)
			WHERE	A.ABAST_ID=@ABAST_ID
			ORDER BY
					1
		OPEN @CUR_DD
		FETCH NEXT FROM @CUR_DD INTO @NRO_LINEA, @CLIENTE_ID, @PRODUCTO_ID, @CANTIDAD, @RL_ID, @SALDO, @TIPO, @POSICION_ID
		WHILE (@@FETCH_STATUS=0)
		BEGIN
		
			INSERT INTO DET_DOCUMENTO_TRANSACCION (
					DOC_TRANS_ID,     NRO_LINEA_TRANS,
					DOCUMENTO_ID,     NRO_LINEA_DOC,
					MOTIVO_ID,        EST_MERC_ID,
					CLIENTE_ID,       CAT_LOG_ID,
					ITEM_OK,          MOVIMIENTO_PENDIENTE,
					DOC_TRANS_ID_REF, NRO_LINEA_TRANS_REF)
			VALUES ( @DOC_TRANS
					,@NRO_LINEA 
					,NULL   ,NULL   ,NULL     ,NULL
					,@CLIENTE_ID
					,NULL ,'0' ,'0' ,NULL     ,NULL)
					
			--3. ENLAZAR LAS EXISTENCIAS A LA TRANSFERENCIA		
			SELECT	@NAVE_OR=NAVE_ACTUAL,
					@POSICION_OR=POSICION_ACTUAL
			FROM	RL_DET_DOC_TRANS_POSICION
			WHERE	RL_ID=@RL_ID;
					
			UPDATE	RL_DET_DOC_TRANS_POSICION 
			SET		DOC_TRANS_ID_TR=@DOC_TRANS,
					NRO_LINEA_TRANS_TR=@NRO_LINEA
			WHERE	RL_ID=@RL_ID;
			
			--4. HISTORICOS.
			EXEC [dbo].[AUDITORIA_HIST_INSERT_TR] @DOC_TRANS, @NRO_LINEA, @NAVE_OR, NULL, @POSICION_OR,@POSICION_ID

			UPDATE	 RL_DET_DOC_TRANS_POSICION 
			SET		 POSICION_ACTUAL=@POSICION_ID
					,POSICION_ANTERIOR=POSICION_ACTUAL
					,NAVE_ANTERIOR=NAVE_ACTUAL
					,NAVE_ACTUAL=NULL
			WHERE	RL_ID=@RL_ID;
												
			FETCH NEXT FROM @CUR_DD INTO @NRO_LINEA, @CLIENTE_ID, @PRODUCTO_ID, @CANTIDAD, @RL_ID, @SALDO, @TIPO, @POSICION_ID		
		END --FIN LOOP CURSOR.
		CLOSE @CUR_DD
		DEALLOCATE @CUR_DD
		
		--6. CONFIRMAR TRANSFERENCIA Y CERRAR DOCUMENTO.	
		
		-------------------------------------------------------------------------------------------------------------------------------------
		-- ME PERMITE ASEGURAR QUE EL FLAG POS_VACIA QUEDE CON EL ESTADO CORRECTO.
		-------------------------------------------------------------------------------------------------------------------------------------
		UPDATE	POSICION SET POS_VACIA='0' 
		WHERE	POSICION_ID IN (SELECT DISTINCT POSICION_ACTUAL FROM RL_DET_DOC_TRANS_POSICION WHERE POSICION_ACTUAL IS NOT NULL)

		UPDATE	POSICION SET POS_VACIA='1' 
		WHERE	POSICION_ID  NOT IN (SELECT DISTINCT POSICION_ACTUAL FROM RL_DET_DOC_TRANS_POSICION WHERE POSICION_ACTUAL IS NOT NULL)		
		
		-------------------------------------------------------------------------------------------------------------------------------------
		-- DEVOLUCION
		-------------------------------------------------------------------------------------------------------------------------------------
		EXEC SYS_DEV_TRANSFERENCIA @DOC_TRANS

		-------------------------------------------------------------------------------------------------------------------------------------
		--FINALIZA LA TRANSFERENCIA	
		-------------------------------------------------------------------------------------------------------------------------------------
		EXEC DBO.MOB_FIN_TRANSFERENCIA @PDOCTRANS=@DOC_TRANS,@USUARIO=@USUARIO_ID
		
		SELECT	@CANT_ABASTECIDA=SUM(ISNULL(CANT_CONFIRMADA,CANTIDAD))
		FROM	ABAST_CONSUMO_LOCATOR
		WHERE	ABAST_ID=@ABAST_ID;
		
		UPDATE	ABAST_CONSUMO_LOCATOR
		SET		CANT_CONFIRMADA=CANTIDAD
		WHERE	ABAST_ID=@ABAST_ID
				AND CANT_CONFIRMADA IS NULL
				
		UPDATE	ABAST_CONSUMO_LOCATOR
		SET		EN_PROGRESO='0',
				FINALIZADO='1'
		WHERE	ABAST_ID=@ABAST_ID		
				
		UPDATE	DET_ABASTECIMIENTO 
		SET		EN_PROGRESO		='0', 
				FINALIZADO		='1', 
				F_INICIO		=GETDATE(), 
				F_FIN			=GETDATE(), 
				CANT_ABASTECIDA	=@CANT_ABASTECIDA
		WHERE	ABAST_ID=@ABAST_ID;
		

		
	END TRY
	BEGIN CATCH
		EXEC USP_RETHROWERROR
	END CATCH					
END-- FINAL PROCEDIMIENTO.