USE [WMS_ELECTRO_906_MATCH]
GO

/*
Script created by Quest Change Director for SQL Server at 16/04/2013 04:21 p.m.
Please back up your database before running this script
*/

PRINT N'Synchronizing objects from DESARROLLO_906 to WMS_ELECTRO_906_MATCH'
GO

IF @@TRANCOUNT > 0 COMMIT TRANSACTION
GO

SET NUMERIC_ROUNDABORT OFF
SET ANSI_PADDING, ANSI_NULLS, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER ON
GO

IF EXISTS (SELECT * FROM tempdb..sysobjects WHERE id=OBJECT_ID('tempdb..#tmpErrors')) DROP TABLE #tmpErrors
GO

CREATE TABLE #tmpErrors (Error int)
GO

SET XACT_ABORT OFF
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO

BEGIN TRANSACTION
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[get_Stock_Web] 
	-- Add the parameters for the stored procedure here
	@UserId uniqueidentifier
AS
BEGIN
--FALTA COMPARAR CON D40


	SELECT	RL.CLIENTE_ID as [Dueño],
			DD.PRODUCTO_ID as [Cod. Producto],
			PROD.DESCRIPCION as [Desc. Producto],
			SUM(RL.CANTIDAD) as [Cantidad],
			P.POSICION_COD as [Posición],
			RL.CAT_LOG_ID as [Cat. Lógica],
			isnull(RL.EST_MERC_ID,'-------') as [Estado Mercadería],
			MIN(case when isnull(CAT.DISP_EGRESO,'0') = '1' AND ((EST.DISP_EGRESO IS NOT NULL AND EST.DISP_EGRESO='1') OR (EST.DISP_EGRESO IS NULL)) then 'SI' else 'NO' end) as [Es Egresable],
			MIN(case when isnull(CAT.PICKING,'0') = '1' AND ((EST.PICKING IS NOT NULL AND EST.PICKING='1') OR (EST.PICKING IS NULL)) then 'SI' else 'NO' end) as [Es Pickeable]
	FROM	RL_DET_DOC_TRANS_POSICION RL
	INNER JOIN DET_DOCUMENTO_TRANSACCION DDT ON (RL.DOC_TRANS_ID = DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS = DDT.NRO_LINEA_TRANS)
	INNER JOIN DET_DOCUMENTO DD ON (DDT.DOCUMENTO_ID = DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC = DD.NRO_LINEA)
	INNER JOIN DOCUMENTO D ON (DD.DOCUMENTO_ID = D.DOCUMENTO_ID)
	INNER JOIN PRODUCTO PROD ON (DD.CLIENTE_ID = PROD.CLIENTE_ID AND DD.PRODUCTO_ID = PROD.PRODUCTO_ID)
	INNER JOIN POSICION P ON (RL.POSICION_ACTUAL = P.POSICION_ID)
	INNER JOIN CATEGORIA_LOGICA CAT ON (RL.CLIENTE_ID = CAT.CLIENTE_ID AND RL.CAT_LOG_ID = CAT.CAT_LOG_ID)
	LEFT JOIN ESTADO_MERCADERIA_RL EST ON (RL.CLIENTE_ID = EST.CLIENTE_ID AND RL.EST_MERC_ID = EST.EST_MERC_ID)
	INNER JOIN USUARIOWEBCLIENTES UC ON (UC.USERID = @UserId and RL.CLIENTE_ID = UC.CLIENTE_ID)
	WHERE	UC.USERID = @UserId and d.STATUS='D40' AND RL.DOC_TRANS_ID_EGR IS NULL AND RL.NRO_LINEA_TRANS_EGR IS NULL
	GROUP BY	RL.CLIENTE_ID,
				DD.PRODUCTO_ID,
				PROD.DESCRIPCION,
				P.POSICION_COD,
				RL.CAT_LOG_ID,
				RL.EST_MERC_ID
UNION
	SELECT	RL.CLIENTE_ID as [Dueño],
			DD.PRODUCTO_ID as [Cod. Producto],
			PROD.DESCRIPCION as [Desc. Producto],
			SUM(RL.CANTIDAD) as [Cantidad],
			N.NAVE_COD as [Posición],
			RL.CAT_LOG_ID as [Cat. Lógica],
			isnull(RL.EST_MERC_ID,'-------') as [Estado Mercadería],
			MIN(case when isnull(CAT.DISP_EGRESO,'0') = '1' AND ((EST.DISP_EGRESO IS NOT NULL AND EST.DISP_EGRESO='1') OR (EST.DISP_EGRESO IS NULL)) then 'SI' else 'NO' end) as [Es Egresable],
			MIN(case when isnull(CAT.PICKING,'0') = '1' AND ((EST.PICKING IS NOT NULL AND EST.PICKING='1') OR (EST.PICKING IS NULL)) then 'SI' else 'NO' end) as [Es Pickeable]
	FROM	RL_DET_DOC_TRANS_POSICION RL
	INNER JOIN DET_DOCUMENTO_TRANSACCION DDT ON (RL.DOC_TRANS_ID = DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS = DDT.NRO_LINEA_TRANS)
	INNER JOIN DET_DOCUMENTO DD ON (DDT.DOCUMENTO_ID = DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC = DD.NRO_LINEA)
	INNER JOIN DOCUMENTO D ON (DD.DOCUMENTO_ID = D.DOCUMENTO_ID)
	INNER JOIN PRODUCTO PROD ON (DD.CLIENTE_ID = PROD.CLIENTE_ID AND DD.PRODUCTO_ID = PROD.PRODUCTO_ID)
	INNER JOIN NAVE N ON (RL.NAVE_ACTUAL = N.NAVE_ID)
	INNER JOIN CATEGORIA_LOGICA CAT ON (RL.CLIENTE_ID = CAT.CLIENTE_ID AND RL.CAT_LOG_ID = CAT.CAT_LOG_ID)
	LEFT JOIN ESTADO_MERCADERIA_RL EST ON (RL.CLIENTE_ID = EST.CLIENTE_ID AND RL.EST_MERC_ID = EST.EST_MERC_ID)
	INNER JOIN USUARIOWEBCLIENTES UC ON (UC.USERID = @UserId and RL.CLIENTE_ID = UC.CLIENTE_ID)
	WHERE	UC.USERID = @UserId and d.STATUS='D40' AND RL.DOC_TRANS_ID_EGR IS NULL AND RL.NRO_LINEA_TRANS_EGR IS NULL
	GROUP BY	RL.CLIENTE_ID,
				DD.PRODUCTO_ID,
				PROD.DESCRIPCION,
				N.NAVE_COD,
				RL.CAT_LOG_ID,
				RL.EST_MERC_ID
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetEgresosxDocumento]        
as        
begin        

--usuario y permisos        
 Declare @RolID  as varchar(5)        
 Declare @Usuario_id as varchar(30)        
 Select @RolId=rol_id,@usuario_id=usuario_id from #temp_usuario_loggin        

select        
 0 as Seleccionar      
 ,c.razon_social as ID_Cliente  --cliente_id      
 ,d.codigo_viaje as Codigo_Viaje --CODIGO_VIAJE      
 ,D.TIPO_DOCUMENTO_ID      
 ,D.CPTE_PREFIJO      
 ,D.CPTE_NUMERO      
 ,d.fecha_cpte as Fecha     --FECHA_CPTE      
 ,D.FECHA_SOLICITUD_CPTE      
 ,d.agente_id as Cod_Agente   --AGENTE_ID      
 ,S.NOMBRE AS Agente      
 ,D.PESO_TOTAL      
 ,D.UNIDAD_PESO      
 ,D.VOLUMEN_TOTAL      
 ,D.UNIDAD_VOLUMEN      
 ,D.TOTAL_BULTOS      
 ,D.ORDEN_DE_COMPRA      
 ,D.OBSERVACIONES      
 ,D.NRO_REMITO      
 ,D.NRO_DESPACHO_IMPORTACION      
 ,d.doc_ext as Documento_Externo --DOC_EXT      
 ,D.INFO_ADICIONAL_1      
 ,D.INFO_ADICIONAL_2      
 ,D.INFO_ADICIONAL_3      
 ,D.TIPO_COMPROBANTE      
 ,PV.DESCRIPCION 
 ,s.localidad 
 ,s.CALLE  
 ,s.NUMERO    
 ,s.CLIENTE_ID
from        
 sys_int_documento d        
inner join sucursal s (nolock) on (d.cliente_id=s.cliente_id and d.agente_id=s.sucursal_id)        


--Perfiles        
inner join RL_ROL_INT_TIPO_DOCUMENTO rd (nolock)        
 on(d.tipo_documento_id=rd.tipo_documento_id)        

inner join rl_sys_cliente_usuario su (nolock)        
	on(d.cliente_id=su.cliente_id)        
inner join cliente c(nolock)        
  on (d.cliente_id = c.cliente_id)       

 

LEFT JOIN PROVINCIA PV  
 ON s.PROVINCIA_ID = PV.PROVINCIA_ID    
 AND s.PAIS_ID = PV.PAIS_ID

where        
 d.tipo_documento_id in ('E01','E02','E03','E04','E06','E08')        
 and d.estado_gt is null        

and su.usuario_id=@usuario_id        
and rd.rol_id=@RolId --Agregado SG.        
and d.tipo_documento_id in (select r.tipo_documento_id from RL_ROL_INT_TIPO_DOCUMENTO R (nolock) where r.rol_id=@RolId)        

order by d.CODIGO_VIAJE        
        
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[getFlagLoteProveedorProducto]
	@CLIENTE_ID		VARCHAR(15),
	@PRODUCTO_ID		VARCHAR(30),
	@OUTLOTEPROVEEDOR	VARCHAR(1) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

    SELECT @OUTLOTEPROVEEDOR = ISNULL(ingLoteProveedor,'0') FROM PRODUCTO WHERE CLIENTE_ID = @CLIENTE_ID AND PRODUCTO_ID = @PRODUCTO_ID
    SET @OUTLOTEPROVEEDOR=ISNULL(@OUTLOTEPROVEEDOR,'0')
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[getFlagPartidaProducto]
	@CLIENTE_ID		VARCHAR(15),
	@PRODUCTO_ID	VARCHAR(30),
	@OUTPARTIDA		VARCHAR(1) OUTPUT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT @OUTPARTIDA = ISNULL(ingPartida,'0') FROM PRODUCTO WHERE CLIENTE_ID = @CLIENTE_ID AND PRODUCTO_ID = @PRODUCTO_ID
  SET @OUTPARTIDA = ISNULL(@OUTPARTIDA,'0')
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[getFlagProdsConLotePartExiten]
  (@CLIENTE_ID    VARCHAR(15),
  @PRODUCTO_ID    VARCHAR(30),
  @OC             VARCHAR(100),
  @OUT            VARCHAR(1) OUTPUT,
  @LOTEPROVEEDOR  VARCHAR(100) OUTPUT,
  @PARTIDA        VARCHAR(100) OUTPUT)
AS
BEGIN
DECLARE @CANTIDAD NUMERIC(20,0)

SELECT @CANTIDAD = COUNT(*) FROM
                              (SELECT DISTINCT S.ORDEN_DE_COMPRA, SS.PRODUCTO_ID, SS.NRO_LOTE, SS.NRO_PARTIDA
                              FROM SYS_INT_DET_DOCUMENTO SS
                              INNER JOIN SYS_INT_DOCUMENTO S ON (SS.CLIENTE_ID = S.CLIENTE_ID AND SS.DOC_EXT = S.DOC_EXT)
                              WHERE S.CLIENTE_ID = @CLIENTE_ID
                                    AND S.ORDEN_DE_COMPRA = @OC
                                    AND SS.PRODUCTO_ID = @PRODUCTO_ID
                                    AND SS.ESTADO_GT IS NULL) X
  IF (@CANTIDAD>1)                  
  BEGIN
    SET @OUT='1'
  END
  ELSE
  BEGIN
    SET @OUT='0'
    IF @CANTIDAD=1
    BEGIN
      SELECT  @LOTEPROVEEDOR = NRO_LOTE
              ,@PARTIDA = NRO_PARTIDA
              FROM SYS_INT_DET_DOCUMENTO SS
              INNER JOIN SYS_INT_DOCUMENTO S ON (SS.CLIENTE_ID = S.CLIENTE_ID AND SS.DOC_EXT = S.DOC_EXT)
              WHERE S.CLIENTE_ID = @CLIENTE_ID
                    AND S.ORDEN_DE_COMPRA = @OC
                    AND SS.PRODUCTO_ID = @PRODUCTO_ID
                    AND SS.ESTADO_GT IS NULL
    END
  END
    
  
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[getLoteProveedorOCProd]
	@CLIENTE_ID			VARCHAR(15),
	@PRODUCTO_ID		VARCHAR(30),
	@OC					VARCHAR(100),
	@OUTLOTEPROVEEDOR	VARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;

    SELECT TOP 1 @OUTLOTEPROVEEDOR = NRO_LOTE
    FROM	SYS_INT_DET_DOCUMENTO SS
    INNER JOIN SYS_INT_DOCUMENTO S ON (SS.CLIENTE_ID = S.CLIENTE_ID AND SS.DOC_EXT = S.DOC_EXT)
    WHERE	SS.CLIENTE_ID = @CLIENTE_ID
			AND SS.PRODUCTO_ID = @PRODUCTO_ID
			AND S.ORDEN_DE_COMPRA = @OC
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[getPartidaOCProd]
	@CLIENTE_ID		VARCHAR(15),
	@PRODUCTO_ID	VARCHAR(30),
	@OC				VARCHAR(100),
	@OUTPARTIDA		VARCHAR(100)
AS
BEGIN
	SET NOCOUNT ON;

    SELECT TOP 1 @OUTPARTIDA = NRO_PARTIDA
    FROM	SYS_INT_DET_DOCUMENTO SS
    INNER JOIN SYS_INT_DOCUMENTO S ON (SS.CLIENTE_ID = S.CLIENTE_ID AND SS.DOC_EXT = S.DOC_EXT)
    WHERE	SS.CLIENTE_ID = @CLIENTE_ID
			AND SS.PRODUCTO_ID = @PRODUCTO_ID
			AND S.ORDEN_DE_COMPRA = @OC
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetResultadosSeriesPorIdProceso]
(@IDPROCESO NUMERIC(20,0) OUTPUT)
AS
BEGIN

  SELECT MENSAJE FROM ResultadosCargaSeriesLog WHERE IDPROCESO = @IDPROCESO ORDER BY PRIORIDAD_MSG
  
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[GetSeriesPorIdProceso]
(@IDPROCESO NUMERIC(20,0) OUTPUT)
AS
BEGIN

  SELECT  CLIENTE_ID, NRO_BULTO, PRODUCTO_ID, SERIE
  FROM    CargaSeriesLog
  WHERE   IDPROCESO = @IDPROCESO
          AND ISNULL(VALIDA,'0')='1'
  ORDER BY 1,2,3,4

END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [dbo].[GetSeriesPorIdProcesoTodas]
(@IDPROCESO NUMERIC(20,0) OUTPUT)
AS
BEGIN

  SELECT  CLIENTE_ID, NRO_BULTO, PRODUCTO_ID, SERIE
  FROM    CargaSeriesLog
  WHERE   IDPROCESO = @IDPROCESO
  ORDER BY 1,2,3,4

END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GRABAR_SERIE_EGRESADA]
(	@CLIENTE_ID				VARCHAR(15),
	@NRO_BULTO				VARCHAR(100),
	@PRODUCTO_ID			VARCHAR(30),
	@NRO_SERIE				VARCHAR(50),
	@VIAJE_ID				VARCHAR(100),
    @USUARIO_ID				VARCHAR(20),
	@TERMINAL				VARCHAR(100)
)
AS
BEGIN

	INSERT INTO SERIES_EGRESADAS VALUES
	(@CLIENTE_ID,@NRO_BULTO,@PRODUCTO_ID,@NRO_SERIE,@VIAJE_ID,@USUARIO_ID,@TERMINAL,GETDATE())

END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[INFORMAR_EMPAQUE_ERP]
(
	@CLIENTE_ID		VARCHAR(15)		OUTPUT,
	@VIAJE_ID		VARCHAR(100)	OUTPUT,
	@USUARIO		VARCHAR(20)		OUTPUT,
	@TERMINAL		VARCHAR(100)	OUTPUT
)
AS
BEGIN
	DECLARE @DOCUMENTO_ID AS NUMERIC(20,0)
	DECLARE @VIAJEIDANTERIOR AS VARCHAR(100)
	
	--INSERTO EN LA TABLA DE PEDIDOS INFORMADOS AL ERP
	INSERT INTO INFORME_PEDIDOS_EMPAQUE_ERP
	VALUES (@CLIENTE_ID, @VIAJE_ID, GETDATE(), @USUARIO, @TERMINAL)

	--SEPARO PEDIDO DE LA OLA
	SELECT @DOCUMENTO_ID = DOCUMENTO_ID, @VIAJEIDANTERIOR = NRO_REMITO FROM DOCUMENTO WHERE CLIENTE_ID = @CLIENTE_ID AND NRO_REMITO = @VIAJE_ID

	UPDATE SYS_INT_DOCUMENTO SET CODIGO_VIAJE = DOC_EXT WHERE DOC_EXT = @VIAJEIDANTERIOR

	UPDATE DOCUMENTO SET NRO_DESPACHO_IMPORTACION = NRO_REMITO WHERE DOCUMENTO_ID = @DOCUMENTO_ID

	UPDATE PICKING SET VIAJE_ID = @VIAJEIDANTERIOR WHERE DOCUMENTO_ID = @DOCUMENTO_ID

	--INFORMO DEVOLUCION
	EXEC SYS_DEV_EGRESO_EMPAQUE @VIAJE_ID
	--EJECUTO SP DEL CLIENTE PARA INFORMAR AL ERP.
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE                         PROCEDURE [dbo].[INGRESA_PICKING_OLA]
	@CLIENTE_ID VARCHAR(15) OUTPUT,
	@VIAJE_ID	VARCHAR(100) OUTPUT
AS
BEGIN
	--DECLARACIONES.
	DECLARE @TIPO_OPERACION VARCHAR(5)
	DECLARE @CANT			AS INT


	DECLARE @TCUR				CURSOR
	DECLARE @VIAJEID			VARCHAR(100)
	DECLARE @PRODUCTO_ID		VARCHAR(30)
	DECLARE @POSICION_COD	VARCHAR(50)
	DECLARE @PALLET			VARCHAR(100)
	DECLARE @RUTA				VARCHAR(100)
	DECLARE @ID				NUMERIC(20,0)		

	--START
	IF EXISTS (SELECT 1 FROM DOCUMENTO WHERE TIPO_OPERACION_ID <> 'EGR' AND NRO_DESPACHO_IMPORTACION = @VIAJE_ID AND CLIENTE_ID = @CLIENTE_ID)
		RAISERROR ('EL NRO. DE DOCUMENTO INGRESADO NO CORRESPONDE A UNA OPERACION DE EGRESO.', 16, 1)
	ELSE

--	SELECT 	@TIPO_OPERACION = TIPO_OPERACION_ID
--	FROM	DOCUMENTO
--	WHERE 	DOCUMENTO_ID=@DOCUMENTO_ID
--
--	IF @TIPO_OPERACION <> 'EGR'
--		BEGIN
--			--SI LA OPERACION NO ES UN EGRESO ENTONCES...
--			RAISERROR ('EL NRO. DE DOCUMENTO INGRESADO NO CORRESPONDE A UNA OPERACION DE EGRESO.', 16, 1)
--		END
--	ELSE
		BEGIN
			SELECT 	@CANT=COUNT(VIAJE_ID) 
			FROM 	PICKING
			WHERE	VIAJE_ID = @VIAJE_ID

			IF @CANT>0 
			BEGIN
				RAISERROR('El picking ya fue ingresado.',16,1)
				RETURN
			END			

			INSERT INTO PICKING 
			SELECT 	 DISTINCT
					 DD.DOCUMENTO_ID
					,DD.NRO_LINEA
					,DD.CLIENTE_ID
					,DD.PRODUCTO_ID 
					,ISNULL(LTRIM(RTRIM(D.NRO_DESPACHO_IMPORTACION)),LTRIM(RTRIM(DD.DOCUMENTO_ID))) AS VIAJE
					,ISNULL(P.TIPO_CONTENEDORA,'0') --'TIPO_CAJA' AS TIPO_CAJA --
					,P.DESCRIPCION
					,DD.CANTIDAD
					,ISNULL(N.NAVE_COD,N2.NAVE_COD) AS NAVE
					,ISNULL(POS.POSICION_COD,N.NAVE_COD) AS POSICION
					,ISNULL(LTRIM(RTRIM(D.GRUPO_PICKING)),ISNULL(LTRIM(RTRIM(D.SUCURSAL_DESTINO)),ISNULL(D.NRO_REMITO,LTRIM(RTRIM(D.DOCUMENTO_ID)))))AS RUTA
					,DD.PROP1
					,NULL AS FECHA_INICIO
					,NULL AS FECHA_FIN
					,NULL AS USUARIO
					,NULL AS CANT_CONFIRMADA
					,NULL AS PALLET_PICKING
					,0 	  AS SALTO_PICKING
					,'0'  AS PALLET_CONTROLADO
					,NULL AS USUARIO_CONTROL_PICKING
					,'0'  AS ST_ETIQUETAS
					,'0'  AS ST_CAMION
					,'0'  AS FACTURADO
					,'0'  AS FIN_PICKING
					,'0'  AS ST_CONTROL_EXP
					,NULL AS FECHA_CONTROL_PALLET
					,NULL AS TERMINAL_CONTROL_PALLET
					,NULL AS FECHA_CONTROL_EXP
					,NULL AS USUARIO_CONTROL_EXP
					,NULL AS TERMINAL_CONTROL_EXPEDICION
					,NULL AS FECHA_CONTROL_FAC
					,NULL AS USUARIO_CONTROL_FAC
					,NULL AS TERMINAL_CONTROL_FAC
					,NULL AS VEHICULO_ID
					,NULL AS PALLET_COMPLETO
					,NULL AS HIJO
					,NULL AS QTY_CONTROLADO
					,NULL AS PALLET_FINAL
					,NULL AS PALLET_CERRADO
					,NULL AS USUARIO_PF
					,NULL AS TERMINAL_PF
					,'0'  AS REMITO_IMPRESO
					,NULL AS NRO_REMITO_PF
					,NULL AS PICKING_ID_REF
					,NULL AS BULTOS_CONTROLADOS
					,NULL AS BULTOS_NO_CONTROLADOS
					,C.FLG_PALLET_HOMBRE
					,'0'  AS TRANSF_TERMINADA
					,DD.NRO_LOTE AS NRO_LOTE
					,DD.NRO_PARTIDA AS NRO_PARTIDA
					,DD.NRO_SERIE AS NRO_SERIE
			FROM	DOCUMENTO D INNER JOIN DET_DOCUMENTO DD
					ON (D.DOCUMENTO_ID=DD.DOCUMENTO_ID)
					INNER JOIN PRODUCTO P
					ON(DD.CLIENTE_ID=P.CLIENTE_ID AND DD.PRODUCTO_ID=P.PRODUCTO_ID)
					INNER JOIN DET_DOCUMENTO_TRANSACCION DDT
					ON(DD.DOCUMENTO_ID=DDT.DOCUMENTO_ID AND DD.NRO_LINEA=DDT.NRO_LINEA_DOC)
					INNER JOIN RL_DET_DOC_TRANS_POSICION RL
					ON(RL.DOC_TRANS_ID_EGR=DDT.DOC_TRANS_ID AND DDT.NRO_LINEA_TRANS=RL.NRO_LINEA_TRANS_EGR)
					LEFT JOIN NAVE N
					ON(RL.NAVE_ANTERIOR=N.NAVE_ID)
					LEFT JOIN POSICION POS
					ON(RL.POSICION_ANTERIOR=POS.POSICION_ID)
					LEFT JOIN NAVE N2
					ON(POS.NAVE_ID=N2.NAVE_ID)
					INNER JOIN CLIENTE_PARAMETROS C
					ON(D.CLIENTE_ID = C.CLIENTE_ID)
			WHERE 	D.CLIENTE_ID=@CLIENTE_ID
					AND D.NRO_DESPACHO_IMPORTACION = @VIAJE_ID


------CONTROLO QUE SERIES FUERON OBLIGATORIAS Y CUALES NO.
	
	UPDATE DET_DOCUMENTO
	SET NRO_SERIE = NULL
	WHERE	DOCUMENTO_ID IN (SELECT DOCUMENTO_ID FROM DOCUMENTO WHERE CLIENTE_ID = @CLIENTE_ID AND NRO_DESPACHO_IMPORTACION = @VIAJE_ID AND TIPO_OPERACION_ID = 'EGR')
			AND NOT EXISTS (SELECT 1 FROM SYS_INT_DET_DOCUMENTO SS
							INNER JOIN SYS_INT_DOCUMENTO S ON (SS.CLIENTE_ID = S.CLIENTE_ID AND SS.DOC_EXT = S.DOC_EXT)
							WHERE	S.DOC_EXT IN (SELECT NRO_REMITO FROM DOCUMENTO WHERE CLIENTE_ID = @CLIENTE_ID AND NRO_DESPACHO_IMPORTACION = @VIAJE_ID AND TIPO_OPERACION_ID = 'EGR')
									AND SS.PROP3=DET_DOCUMENTO.NRO_SERIE)
--	UPDATE DET_DOCUMENTO
--	SET NRO_SERIE = NULL
--	WHERE DOCUMENTO_ID = @DOCUMENTO_ID
--			AND NOT EXISTS (SELECT 1 FROM SYS_INT_DET_DOCUMENTO SS
--							INNER JOIN SYS_INT_DOCUMENTO S ON (SS.CLIENTE_ID = S.CLIENTE_ID AND SS.DOC_EXT = S.DOC_EXT)
--							WHERE S.DOC_EXT = (SELECT NRO_REMITO FROM DOCUMENTO WHERE DOCUMENTO_ID = @DOCUMENTO_ID)
--									AND PROP3=DET_DOCUMENTO.NRO_SERIE)
------

		END --FIN ELSE
END --FIN PROCEDURE
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[INGRESO_CONTENEDORAS]
	@CLIENTE_ID			varchar(15),
	@PRODUCTO_ID		varchar(30),
	@ORDEN_COMPRA		varchar(100),
	@CANTIDAD			numeric(20,5),
	@CONTENEDORA		int,
  @LOTEPROVEEDOR  VARCHAR(100),
  @PARTIDA        VARCHAR(100)                            
AS
begin
	DECLARE @USUARIO	VARCHAR(50)
	DECLARE @TERMINAL VARCHAR(100)

SELECT @USUARIO=USUARIO_ID FROM #TEMP_USUARIO_LOGGIN
	SET @TERMINAL=HOST_NAME()
	
INSERT INTO CONFIGURACION_CONTENEDORAS(CLIENTE_ID, PRODUCTO_ID, ORDEN_COMPRA, CANTIDAD, NRO_CONTENEDORA, USUARIO, TERMINAL, FECHA, NRO_LOTE, NRO_PARTIDA)                    
VALUES                (@CLIENTE_ID,@PRODUCTO_ID,@ORDEN_COMPRA,@CANTIDAD,@CONTENEDORA,@USUARIO,@TERMINAL,GETDATE(),@LOTEPROVEEDOR,@PARTIDA)
end
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[INGRESO_OC_EXISTE_CONTEN]
	@CLIENTE_ID		varchar(15),
	@PRODUCTO_ID	varchar(30),
	@ORDEN_COMPRA	varchar(100)
AS
	SELECT     producto_id
	FROM         CONFIGURACION_CONTENEDORAS
	WHERE     (CLIENTE_ID = @CLIENTE_ID) AND (PRODUCTO_ID = @PRODUCTO_ID) AND (ORDEN_COMPRA = @ORDEN_COMPRA and PROCESADO = '0')
		/* SET NOCOUNT ON */ 
		/*RETURN*/
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[insertarSerieLog]
  (
      @IDPROCESO         NUMERIC(20,0) OUTPUT,
      @CLIENTE_ID        VARCHAR(15) OUTPUT,
      @NRO_BULTO         VARCHAR(100) OUTPUT,
      @PRODUCTO_ID       VARCHAR(30) OUTPUT,
      @SERIE             VARCHAR(50) OUTPUT,
      @TERMINAL          VARCHAR(100) OUTPUT,
      @USUARIO           VARCHAR(100) OUTPUT,
      @ARCHIVO           VARCHAR(100) OUTPUT
  )
  AS
  BEGIN
    
    IF (ISNULL(@IDPROCESO,0)<>0 AND ISNULL(@CLIENTE_ID,'')<>'' AND ISNULL(@NRO_BULTO,'')<>'' AND ISNULL(@PRODUCTO_ID,'')<>'' AND ISNULL(@SERIE,'')<>'' AND ISNULL(@TERMINAL,'')<>'' AND ISNULL(@USUARIO,'')<>'' AND ISNULL(@ARCHIVO,'')<>'')
    INSERT INTO CargaSeriesLog VALUES
    (@IDPROCESO,@CLIENTE_ID,@NRO_BULTO,@PRODUCTO_ID,@SERIE,GETDATE(),@TERMINAL,@USUARIO,@ARCHIVO,'0','0')
  
  END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[INTERCAMBIAR_SERIES_PICK]
(@CLIENTE_ID VARCHAR(15), @PRODUCTO_ID VARCHAR(30), @VIAJE_ID VARCHAR(100), @NRO_SERIE_ACTUAL VARCHAR(50),@NRO_SERIE_NUEVA VARCHAR(50),@OUT VARCHAR(1) OUTPUT)
AS
BEGIN


	DECLARE @EXISTE_EN_PICKING_SN		INT
	DECLARE @DOC_TRANS_ID_EGR_AC		NUMERIC(20,0)
	DECLARE	@DOC_TRANS_ID_EGR_NW		NUMERIC(20,0)
	DECLARE @NRO_LINEA_TRANS_EGR_AC		NUMERIC(20,0)
	DECLARE @NRO_LINEA_TRANS_EGR_NW		NUMERIC(20,0)
	DECLARE @RL_ACTUAL					NUMERIC(20,0)
	DECLARE @RL_NUEVA					NUMERIC(20,0)
	DECLARE @PICKING_ACTUAL				NUMERIC(20,0)
	DECLARE @PICKING_NUEVA				NUMERIC(20,0)
	DECLARE @DOCID_AC					NUMERIC(20,0)
	DECLARE @DOCID_NW					NUMERIC(20,0)
	DECLARE @NROLINEA_AC				NUMERIC(20,0)
	DECLARE @NROLINEA_NW				NUMERIC(20,0)
	DECLARE @DOC_ID_ING_NUEVA			NUMERIC(20,0)
	DECLARE @NRO_LINEA_ING_NUEVA		NUMERIC(20,0)
	DECLARE @CAT_LOG_ID_FINAL			VARCHAR(50)
	DECLARE @PreEgrId					NUMERIC(20,0)
	DECLARE @PALLET_HOMBRE				VARCHAR(1)
	DECLARE @USUARIO_AC					VARCHAR(20)
	DECLARE @PALLET_PICKING_AC			NUMERIC(20,0)
	DECLARE @FECHA_INICIO_AC			DATETIME
	DECLARE @USUARIO_NW					VARCHAR(20)
	DECLARE @PALLET_PICKING_NW			NUMERIC(20,0)
	DECLARE @FECHA_INICIO_NW			DATETIME
	DECLARE @FINICIO					DATETIME
	DECLARE @USUARIOPICK				VARCHAR(20)
	DECLARE @PALLET_PICKING				NUMERIC(20,0)
BEGIN TRY
	--
	select	@PALLET_HOMBRE=flg_pallet_hombre
	from	cliente_parametros
	where	CLIENTE_ID = @CLIENTE_ID
	--ENCUENTRO LA NAVE DE PRE EGRESO
	Select	@PreEgrId=Nave_Id
	From	Nave
	Where	Pre_Egreso='1'
	--SI LLEGUE ACA ES PORQUE LAS 2 SERIES SON VALIDAS.
	--ME FIJO SI LA SERIE NUEVA EXISTE EN PICKING Y NO FUE PICKEADA
	SELECT	@EXISTE_EN_PICKING_SN = COUNT(*)
	FROM	PICKING
	WHERE	CLIENTE_ID = @CLIENTE_ID
			AND PRODUCTO_ID = @PRODUCTO_ID
			AND NRO_SERIE = @NRO_SERIE_NUEVA
			AND FECHA_FIN IS NULL

	IF @EXISTE_EN_PICKING_SN > 0
	BEGIN
		--LA SERIE EXISTE EN PICKING
		--cambio tarea tomada
		SELECT	@FINICIO = FECHA_INICIO
				,@USUARIOPICK = USUARIO
				,@PALLET_PICKING = PALLET_PICKING
		FROM PICKING WHERE CLIENTE_ID = @CLIENTE_ID AND PRODUCTO_ID = @PRODUCTO_ID AND VIAJE_ID = @VIAJE_ID AND NRO_SERIE = @NRO_SERIE_ACTUAL

		UPDATE PICKING SET FECHA_INICIO = NULL, USUARIO=NULL, PALLET_PICKING=NULL
		WHERE CLIENTE_ID = @CLIENTE_ID AND PRODUCTO_ID = @PRODUCTO_ID AND VIAJE_ID = @VIAJE_ID AND NRO_SERIE = @NRO_SERIE_ACTUAL

		UPDATE PICKING SET FECHA_INICIO = @FINICIO, USUARIO=@USUARIOPICK, PALLET_PICKING=@PALLET_PICKING
		WHERE CLIENTE_ID = @CLIENTE_ID AND PRODUCTO_ID = @PRODUCTO_ID AND VIAJE_ID = @VIAJE_ID AND NRO_SERIE = @NRO_SERIE_NUEVA

		--INTERCAMBIO INFORMACION DE RL ENTRE LAS 2 SERIES.
--		SELECT	@DOC_TRANS_ID_EGR_AC = RL.DOC_TRANS_ID_EGR
--				,@NRO_LINEA_TRANS_EGR_AC = RL.NRO_LINEA_TRANS_EGR
--				,@RL_ACTUAL = RL.RL_ID
--				,@PICKING_ACTUAL = P.PICKING_ID
--				,@DOCID_AC = P.DOCUMENTO_ID
--				,@NROLINEA_AC = P.NRO_LINEA
--				,@USUARIO_AC = P.USUARIO
--				,@PALLET_PICKING_AC = P.PALLET_PICKING
--				,@FECHA_INICIO_AC = P.FECHA_INICIO
--		FROM	RL_DET_DOC_TRANS_POSICION RL
--		INNER JOIN DET_DOCUMENTO_TRANSACCION DDT ON (RL.DOC_TRANS_ID_EGR = DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS_EGR = DDT.NRO_LINEA_TRANS)
--		INNER JOIN DET_DOCUMENTO DD ON (DDT.DOCUMENTO_ID = DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC = DD.NRO_LINEA)
--		INNER JOIN PICKING P ON (DD.DOCUMENTO_ID = P.DOCUMENTO_ID AND DD.NRO_LINEA = P.NRO_LINEA)
--		WHERE	P.CLIENTE_ID = @CLIENTE_ID
--				AND P.PRODUCTO_ID = @PRODUCTO_ID
--				AND P.VIAJE_ID = @VIAJE_ID
--				AND P.NRO_SERIE = @NRO_SERIE_ACTUAL
--
--		SELECT	@DOC_TRANS_ID_EGR_NW = RL.DOC_TRANS_ID_EGR
--				,@NRO_LINEA_TRANS_EGR_NW = RL.NRO_LINEA_TRANS_EGR
--				,@RL_NUEVA = RL.RL_ID
--				,@PICKING_NUEVA = P.PICKING_ID
--				,@DOCID_NW = P.DOCUMENTO_ID
--				,@NROLINEA_NW = P.NRO_LINEA
--				,@USUARIO_NW = P.USUARIO
--				,@PALLET_PICKING_NW = P.PALLET_PICKING
--				,@FECHA_INICIO_NW = P.FECHA_INICIO
--		FROM	RL_DET_DOC_TRANS_POSICION RL
--		INNER JOIN DET_DOCUMENTO_TRANSACCION DDT ON (RL.DOC_TRANS_ID_EGR = DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS_EGR = DDT.NRO_LINEA_TRANS)
--		INNER JOIN DET_DOCUMENTO DD ON (DDT.DOCUMENTO_ID = DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC = DD.NRO_LINEA)
--		INNER JOIN PICKING P ON (DD.DOCUMENTO_ID = P.DOCUMENTO_ID AND DD.NRO_LINEA = P.NRO_LINEA)
--		WHERE	P.CLIENTE_ID = @CLIENTE_ID
--				AND P.PRODUCTO_ID = @PRODUCTO_ID
--				AND P.NRO_SERIE = @NRO_SERIE_NUEVA
--				AND FECHA_FIN IS NULL
--				AND USUARIO IS NULL
--				AND PALLET_PICKING IS NULL
--
--		UPDATE	RL_DET_DOC_TRANS_POSICION
--		SET		DOC_TRANS_ID_EGR = @DOC_TRANS_ID_EGR_AC
--				,NRO_LINEA_TRANS_EGR = @NRO_LINEA_TRANS_EGR_AC
--		WHERE	RL_ID = @RL_NUEVA
--
--		UPDATE	RL_DET_DOC_TRANS_POSICION
--		SET		DOC_TRANS_ID_EGR = @DOC_TRANS_ID_EGR_NW
--				,NRO_LINEA_TRANS_EGR = @NRO_LINEA_TRANS_EGR_NW
--		WHERE	RL_ID = @RL_ACTUAL

--		--HAGO UPDATE EN PICKING_ID = @PICKING_NUEVA
--		PRINT 'UPDATE EN PICKING_ID: ' + CAST(@PICKING_NUEVA AS VARCHAR)
--		UPDATE PICKING SET DOCUMENTO_ID = @DOCID_AC, NRO_LINEA = @NROLINEA_AC, USUARIO = @USUARIO_AC, PALLET_PICKING = @PALLET_PICKING_AC, FECHA_INICIO = @FECHA_INICIO_AC WHERE PICKING_ID = @PICKING_NUEVA
--		PRINT 'UPDATE EN PICKING_ID: ' + CAST(@PICKING_ACTUAL AS VARCHAR)
--		UPDATE PICKING SET DOCUMENTO_ID = @DOCID_NW, NRO_LINEA = @NROLINEA_NW, USUARIO = NULL, PALLET_PICKING = NULL, FECHA_INICIO = NULL WHERE PICKING_ID = @PICKING_ACTUAL
--
--		Delete from Consumo_Locator_Egr Where Documento_id=@DOCID_AC and Nro_linea=@NROLINEA_AC
--
--		Insert into Consumo_Locator_Egr (Documento_Id, Nro_Linea, Cliente_Id, Producto_Id, Cantidad, RL_ID,Saldo, Tipo, Fecha, Procesado)
--		Values(@DOCID_AC, @NROLINEA_AC, @CLIENTE_ID, @PRODUCTO_ID, 1,@RL_NUEVA,0,2,GETDATE(),'S')

	END
	ELSE
	BEGIN

		SELECT	@DOC_TRANS_ID_EGR_AC = RL.DOC_TRANS_ID_EGR
				,@NRO_LINEA_TRANS_EGR_AC = RL.NRO_LINEA_TRANS_EGR
				,@RL_ACTUAL = RL.RL_ID
				,@PICKING_ACTUAL = P.PICKING_ID
				,@DOCID_AC = P.DOCUMENTO_ID
				,@NROLINEA_AC = P.NRO_LINEA
				,@USUARIO_AC = P.USUARIO
				,@PALLET_PICKING_AC = P.PALLET_PICKING
				,@FECHA_INICIO_AC = P.FECHA_INICIO
		FROM	RL_DET_DOC_TRANS_POSICION RL
		INNER JOIN DET_DOCUMENTO_TRANSACCION DDT ON (RL.DOC_TRANS_ID_EGR = DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS_EGR = DDT.NRO_LINEA_TRANS)
		INNER JOIN DET_DOCUMENTO DD ON (DDT.DOCUMENTO_ID = DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC = DD.NRO_LINEA)
		INNER JOIN PICKING P ON (DD.DOCUMENTO_ID = P.DOCUMENTO_ID AND DD.NRO_LINEA = P.NRO_LINEA)
		WHERE	P.CLIENTE_ID = @CLIENTE_ID
				AND P.PRODUCTO_ID = @PRODUCTO_ID
				AND P.VIAJE_ID = @VIAJE_ID
				AND P.NRO_SERIE = @NRO_SERIE_ACTUAL

		SELECT	@RL_NUEVA = RL.RL_ID
				,@DOC_ID_ING_NUEVA = DD.DOCUMENTO_ID
				,@NRO_LINEA_ING_NUEVA = DD.NRO_LINEA
		FROM	RL_DET_DOC_TRANS_POSICION RL
		INNER JOIN DET_DOCUMENTO_TRANSACCION DDT ON (RL.DOC_TRANS_ID = DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS = DDT.NRO_LINEA_TRANS)
		INNER JOIN DET_DOCUMENTO DD ON (DDT.DOCUMENTO_ID = DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC = DD.NRO_LINEA)
		WHERE	DD.CLIENTE_ID = @CLIENTE_ID
				AND DD.PRODUCTO_ID = @PRODUCTO_ID
				AND DD.NRO_SERIE = @NRO_SERIE_NUEVA

		--YA TENGO LAS RL QUE VOY A USAR.
--SE PUSO DISPONIBLE LA CATEGORIA PORQUE NO SE GUARDA UN HISTORICO DE LA CATEGORIA PREVIA AL EGRESO.
-- COMO PROPUESTA DE MEJORA SE DEBERIA GUARDAR ESTE HISTORICO EN POSIBLEMENTE RL PARA RECUPERAR EL ESTADO
--PREVIO AL EGRESO.
			Update 	 Rl_Det_Doc_Trans_posicion 
			Set 	 Disponible				='1'
					,Doc_Trans_Id_Egr		=null
					,Nro_Linea_Trans_Egr	=null
					,Posicion_Actual		=Posicion_Anterior
					,Posicion_Anterior		=Null
					,Nave_Actual			=Nave_Anterior
					,Nave_Anterior			=1
					,Cat_log_id				='DISPONIBLE'
			Where	Rl_Id					=@RL_ACTUAL
			
			--Consumo la Nueva Rl
			Update	Rl_Det_Doc_Trans_Posicion 
			Set 	 Disponible='0'
					,Posicion_Anterior=Posicion_Actual
					,Posicion_Actual=Null
					,Nave_Anterior=Nave_Actual
					,Nave_Actual=@PreEgrId
					,Doc_Trans_id_Egr=@DOC_TRANS_ID_EGR_AC
					,Nro_Linea_Trans_Egr=@NRO_LINEA_TRANS_EGR_AC
					,Cat_log_Id='TRAN_EGR'
			Where	Rl_id=@RL_NUEVA

			--AHORA TENGO QUE ACTUALIZAR PICKING CAMBIANDO LOS DOCUMENTOS DE EGRESO ACTUALIZANDO LOS DATOS
			--O SEA, EL PICKING DE LA SERIE ACTUAL TENGO QUE LLEVARLO AL DE LA SERIE NUEVA.

			INSERT INTO PICKING 
			SELECT 	 DISTINCT
					 DD.DOCUMENTO_ID
					,DD.NRO_LINEA
					,DD.CLIENTE_ID
					,DD.PRODUCTO_ID 
					,ISNULL(LTRIM(RTRIM(D.NRO_DESPACHO_IMPORTACION)),LTRIM(RTRIM(DD.DOCUMENTO_ID))) AS VIAJE
					,ISNULL(P.TIPO_CONTENEDORA,'0') --'TIPO_CAJA' AS TIPO_CAJA --
					,P.DESCRIPCION
					,DD.CANTIDAD
					,ISNULL(N.NAVE_COD,N2.NAVE_COD) AS NAVE
					,ISNULL(POS.POSICION_COD,N.NAVE_COD) AS POSICION
					,ISNULL(LTRIM(RTRIM(D.SUCURSAL_DESTINO)),ISNULL(LTRIM(RTRIM(D.NRO_REMITO)),LTRIM(RTRIM(D.DOCUMENTO_ID))))
					,DD.PROP1
					,NULL AS FECHA_INICIO
					,NULL AS FECHA_FIN
					,NULL AS USUARIO
					,NULL AS CANT_CONFIRMADA
					,NULL AS PALLET_PICKING
					,0 	  AS SALTO_PICKING
					,'0'  AS PALLET_CONTROLADO
					,NULL AS USUARIO_CONTROL_PICKING
					,'0'  AS ST_ETIQUETAS
					,'0'  AS ST_CAMION
					,'0'  AS FACTURADO
					,'0'  AS FIN_PICKING
					,'0'  AS ST_CONTROL_EXP
					,NULL AS FECHA_CONTROL_PALLET
					,NULL AS TERMINAL_CONTROL_PALLET
					,NULL AS FECHA_CONTROL_EXP
					,NULL AS USUARIO_CONTROL_EXP
					,NULL AS TERMINAL_CONTROL_EXPEDICION
					,NULL AS FECHA_CONTROL_FAC
					,NULL AS USUARIO_CONTROL_FAC
					,NULL AS TERMINAL_CONTROL_FAC
					,NULL AS VEHICULO_ID
					,NULL AS PALLET_COMPLETO
					,NULL AS HIJO
					,NULL AS QTY_CONTROLADO
					,NULL AS PALLET_FINAL
					,NULL AS PALLET_CERRADO
					,NULL AS USUARIO_PF
					,NULL AS TERMINAL_PF
					,'0'  AS REMITO_IMPRESO
					,NULL AS NRO_REMITO_PF
					,NULL AS PICKING_ID_REF
					,NULL AS BULTOS_CONTROLADOS
					,NULL AS BULTOS_NO_CONTROLADOS
					,@PALLET_HOMBRE AS FLG_PALLET_HOMBRE --CAMBIAR
					,0	  AS TRANSF_TERMINANDA	--CAMBIAR
					,DDING.nro_lote,DDING.nro_partida,DDING.nro_serie
			FROM	DOCUMENTO D
			INNER JOIN DET_DOCUMENTO DD	ON (D.DOCUMENTO_ID=DD.DOCUMENTO_ID)
			INNER JOIN DET_DOCUMENTO_TRANSACCION DDT ON(DD.DOCUMENTO_ID=DDT.DOCUMENTO_ID AND DD.NRO_LINEA=DDT.NRO_LINEA_DOC)
			INNER JOIN RL_DET_DOC_TRANS_POSICION RL	ON(RL.DOC_TRANS_ID_EGR=DDT.DOC_TRANS_ID AND DDT.NRO_LINEA_TRANS=RL.NRO_LINEA_TRANS_EGR)
			INNER JOIN DET_DOCUMENTO_TRANSACCION DDTING ON(RL.DOC_TRANS_ID=DDTING.DOC_TRANS_ID AND DDTING.NRO_LINEA_TRANS=RL.NRO_LINEA_TRANS)
			INNER JOIN DET_DOCUMENTO DDING ON(DDING.DOCUMENTO_ID=DDTING.DOCUMENTO_ID AND DDING.NRO_LINEA=DDTING.NRO_LINEA_DOC)
			INNER JOIN PRODUCTO P ON(DD.CLIENTE_ID=P.CLIENTE_ID AND DD.PRODUCTO_ID=P.PRODUCTO_ID)
			LEFT JOIN NAVE N ON(RL.NAVE_ANTERIOR=N.NAVE_ID)
			LEFT JOIN POSICION POS ON(RL.POSICION_ANTERIOR=POS.POSICION_ID)
			LEFT JOIN NAVE N2 ON(POS.NAVE_ID=N2.NAVE_ID)
			WHERE 	RL.RL_ID = @RL_NUEVA

			UPDATE PICKING SET USUARIO = @USUARIO_AC, PALLET_PICKING = @PALLET_PICKING_AC, FECHA_INICIO = @FECHA_INICIO_AC
			WHERE CLIENTE_ID = @CLIENTE_ID AND VIAJE_ID = @VIAJE_ID AND NRO_SERIE = @NRO_SERIE_NUEVA

			DELETE FROM PICKING WHERE PICKING_ID = @PICKING_ACTUAL

		Delete from Consumo_Locator_Egr Where Documento_id=@DOCID_AC and Nro_linea=@NROLINEA_AC

		Insert into Consumo_Locator_Egr (Documento_Id, Nro_Linea, Cliente_Id, Producto_Id, Cantidad, RL_ID,Saldo, Tipo, Fecha, Procesado)
		Values(@DOCID_AC, @NROLINEA_AC, @CLIENTE_ID, @PRODUCTO_ID, 1,@RL_NUEVA,0,2,GETDATE(),'S')
	END

	SET @OUT='1'

END TRY
BEGIN CATCH
	SET @OUT='0'
	RAISERROR('ERROR',16,1)
END CATCH			

END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Locator_Transferencia_Bulto]
 @Cliente_id    varchar(50),
 @Producto_id   varchar(100),
 @UbicacionOrigenCod  varchar(100)
 
As
Begin
 
 select top 1 x1.cod as Ubicacion  
 
 from (select p.ORDEN_LOCATOR as orden,p.POSICION_COD as cod  
  from RL_PRODUCTO_POSICION_PERMITIDA pp
    inner join POSICION p on (pp.POSICION_ID=p.POSICION_ID)
  where pp.CLIENTE_ID=@Cliente_id and pp.PRODUCTO_ID=@Producto_id and p.POSICION_COD<>@UbicacionOrigenCod
  union all
  select n.ORDEN_LOCATOR as orden,n.NAVE_COD as cod  
   from RL_PRODUCTO_POSICION_PERMITIDA pp
    inner join NAVE n on (pp.NAVE_ID =n.NAVE_ID )
   where pp.CLIENTE_ID=@Cliente_id and pp.PRODUCTO_ID=@Producto_id and n.NAVE_COD<>@UbicacionOrigenCod) x1  
 order by x1.orden asc
   
end
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE        Procedure [dbo].[LocatorEgreso_OLA]
@pCliente_id	as varchar(15) Output,
@pViaje_id		as varchar(100) Output
As
Begin
  declare @Fecha_Vto			as datetime
  declare @OrdenPicking			as numeric(10,0)
  declare @Tipo_Posicion		as varchar(10)
  declare @Codigo_Posicion		as varchar(100)
  declare @Producto_id			as varchar(30)
  declare @Cantidad				as numeric(20,5)
  declare @Aux					as varchar(50)
  declare @NewProducto			as varchar(30)
  declare @OldProducto			as varchar(30)
  declare @vQtyResto			as numeric(20,5)
  declare @vRl_id				as numeric(20)
  declare @QtySol				as numeric(20,5)
  declare @vNroLinea			as numeric(20)
  declare @NRO_BULTO			as varchar(50)
  declare @NRO_LOTE				as varchar(50)
  declare @EST_MERC_ID			as varchar(15)
  declare @NRO_DESPACHO			as varchar(50)
  declare @NRO_PARTIDA			as varchar(50)
  declare @UNIDAD_ID			as varchar(5)
  declare @PROP1				as varchar(100)
  declare @PROP2				as varchar(100)
  declare @PROP3				as varchar(100)
  declare @DESC					as varchar(200)
  declare @CAT_LOG_ID			as varchar(50)
  declare @id					as numeric(20,0)
  declare @Documento_id 		as Numeric(20,0)
  declare @Saldo				as numeric(20,5)
  declare @TipoSaldo			as varchar(20)
  declare @Doc_Trans 			as numeric(20)
  declare @QtyDetDocumento		as numeric(20)
  declare @vUsuario_id			as varchar(50)
  declare @vTerminal			as varchar(50)
  declare @RsExist				as Cursor
  declare @RsActuRL				as Cursor
  declare @Crit1				as varchar(30)
  declare @Crit2				as varchar(30)
  declare @Crit3				as varchar(30)
  declare @fecha_alta_gtw		as datetime
  declare @nro_serie			as varchar(50)
  declare @NewLoteProveedor		as varchar(100)
  declare @OldLoteProveedor		as varchar(100)
  declare @NewNroPartida		as varchar(100)
  declare @OldNroPartida		as varchar(100)
  declare @NewNroSerie			as varchar(50)
  declare @OldNroSerie			as varchar(50)
  declare @RSDOCEGR				as cursor
  declare @DOCIDPIVOT			as numeric(20,0)
  declare @NROLINEAPIVOT		as numeric(20,0)
  DECLARE @PESOPROPS			as numeric(5,0)
  Set xAct_abort On

  --Busco todos documentos de egreso generados para el viaje.
  --Genero una tabla ordenando todos los detalles de los documentos teniendo en cuenta los pesos relativos segun propiedades.
  --Ejecuto el locator por cada documento/nro_linea en el orden del peso.

  --ESTO ES SOLO PARA PRUEBAS DESDE SQL.
  	CREATE TABLE #temp_usuario_loggin(  usuario_id				    VARCHAR(15),
                                        terminal				      VARCHAR(100),
                                        fecha_loggin			    DATETIME,
                                        session_id				    VARCHAR(15),
                                        rol_id					      VARCHAR(15),
                                        emplazamiento_default	VARCHAR(15),
                                        deposito_default		  VARCHAR(15)
                                      )
                                      
  	EXEC Funciones_Loggin_Api#Registra_Usuario_Loggin 'ADMIN'
  -----------------------------------------

  --#SDDPESO ASIGNA A CADA CLIENTE_ID | DOC_EXT | NRO LINEA UN PESO LOGICO DE ACUERDO A LAS PROPIEDADES NRO_LOTE, NRO_PARTIDA Y NRO_SERIE
  CREATE TABLE #SDDPESO
    (CLIENTE_ID		VARCHAR(15)
    ,CODIGO_VIAJE	VARCHAR(100)
    ,DOCUMENTO_ID	NUMERIC(20,0)
    ,NRO_LINEA		NUMERIC(20,0)
    ,PESO INT)


  INSERT INTO #SDDPESO
  SELECT	D.CLIENTE_ID, D.NRO_DESPACHO_IMPORTACION, DD.DOCUMENTO_ID, DD.NRO_LINEA,
          CAST((CASE
          WHEN ISNULL(NRO_LOTE,'')='' AND ISNULL(NRO_PARTIDA,'')='' AND ISNULL(PROP3,'')='' THEN 0
          WHEN ISNULL(NRO_LOTE,'')='' AND ISNULL(NRO_PARTIDA,'')='' AND ISNULL(PROP3,'')<>'' THEN 1
          WHEN ISNULL(NRO_LOTE,'')='' AND ISNULL(NRO_PARTIDA,'')<>'' AND ISNULL(PROP3,'')='' THEN 1
          WHEN ISNULL(NRO_LOTE,'')='' AND ISNULL(NRO_PARTIDA,'')<>'' AND ISNULL(PROP3,'')<>'' THEN 2
          WHEN ISNULL(NRO_LOTE,'')<>'' AND ISNULL(NRO_PARTIDA,'')='' AND ISNULL(PROP3,'')='' THEN 1
          WHEN ISNULL(NRO_LOTE,'')<>'' AND ISNULL(NRO_PARTIDA,'')='' AND ISNULL(PROP3,'')<>'' THEN 2
          WHEN ISNULL(NRO_LOTE,'')<>'' AND ISNULL(NRO_PARTIDA,'')<>'' AND ISNULL(PROP3,'')='' THEN 2
          WHEN ISNULL(NRO_LOTE,'')<>'' AND ISNULL(NRO_PARTIDA,'')<>'' AND ISNULL(PROP3,'')<>'' THEN 3
          ELSE 0
          END) AS INT) AS PESO
  FROM    DET_DOCUMENTO DD
          INNER JOIN DOCUMENTO D ON (DD.CLIENTE_ID = D.CLIENTE_ID AND DD.DOCUMENTO_ID = D.DOCUMENTO_ID)
  WHERE   D.CLIENTE_ID = @pCliente_id 
          AND D.NRO_DESPACHO_IMPORTACION = @pViaje_id

  SET NOCOUNT ON;
  SET @vNroLinea = 0
  ----------------------------------------------------------------
  --Obtengo los criterios de ordenamiento.
  ----------------------------------------------------------------
  Select	@Crit1=CRITERIO_1, @Crit2=CRITERIO_2, @Crit3=CRITERIO_3
  From		RL_CLIENTE_LOCATOR
  Where		Cliente_id=@pCliente_id
  ----------------------------------------------------------------
  if (@Crit1 is null) and (@Crit2 is null) and (@Crit3 is null)
  begin
    --Si todos son nulos entonces x default salgo con orden de picking.
    Set @Crit1='ORDEN_PICKING'
  end

  SET @RSDOCEGR = CURSOR FOR
      SELECT  DD.DOCUMENTO_ID, DD.NRO_LINEA, P.PESO
      FROM    DET_DOCUMENTO DD
              INNER JOIN #SDDPESO P ON (DD.DOCUMENTO_ID = P.DOCUMENTO_ID AND DD.NRO_LINEA = P.NRO_LINEA)
      WHERE   DD.CLIENTE_ID = @pCliente_id 
              AND P.CODIGO_VIAJE = @pViaje_id
      ORDER BY 
              P.PESO DESC, P.DOCUMENTO_ID ASC, P.NRO_LINEA ASC

  OPEN @RSDOCEGR
  FETCH NEXT FROM @RSDOCEGR INTO @DOCIDPIVOT, @NROLINEAPIVOT, @PESOPROPS
  
  WHILE @@FETCH_STATUS = 0
  BEGIN
    
    SET @QtySol=0
    set @QtySol=dbo.GetQtySol(@DOCIDPIVOT,@NROLINEAPIVOT,@pCliente_id)
    set @vQtyResto=@QtySol
  
    Set @RsExist = Cursor For
      Select	X.*
      from	( SELECT	dd.fecha_vencimiento
                      ,isnull(p.orden_picking,999) as ORDEN_PICKING
                      ,'POS' as ubicacion
                      ,p.posicion_cod as posicion
                      ,dd.cliente_id
                      ,dd.producto_id as producto
                      ,rl.cantidad
                      ,rl.rl_id
                      ,dd.NRO_BULTO
                      ,dd.NRO_LOTE
                      ,RL.EST_MERC_ID
                      ,dd.NRO_DESPACHO
                      ,dd.NRO_PARTIDA
                      ,dd.UNIDAD_ID
                      ,dd.PROP1
                      ,dd.PROP2
                      ,dd.PROP3
                      ,dd.DESCRIPCION
                      ,RL.CAT_LOG_ID
                      ,d.fecha_alta_gtw
                      ,dd.nro_serie
              FROM	  rl_det_doc_trans_posicion rl
                      inner join det_documento_transaccion ddt on(rl.doc_trans_id=ddt.doc_trans_id and rl.nro_linea_trans=ddt.nro_linea_trans)
                      inner join det_documento dd ON (ddt.documento_id=dd.documento_id AND ddt.nro_linea_doc=dd.nro_linea)
                      inner join categoria_logica cl on (rl.cliente_id=cl.cliente_id and rl.cat_log_id=cl.cat_log_id )
                      inner join posicion p on (rl.posicion_actual=p.posicion_id)
                      left join estado_mercaderia_rl em on (rl.cliente_id=em.cliente_id and rl.est_merc_id=em.est_merc_id) 	
                      inner join documento d on(dd.documento_id=d.documento_id)
              WHERE	  rl.doc_trans_id_egr is null
                      and rl.nro_linea_trans_egr is null
                      and rl.disponible='1'
                      and isnull(em.disp_egreso,'1')='1'
                      and isnull(em.picking,'1')='1'
                      and p.pos_lockeada='0' and p.picking='1'
  and cl.disp_egreso='1' and cl.picking='1'
                      and rl.cat_log_id<>'TRAN_EGR' --para asegurarme que no este en proceso de egreso
                      --and dd.producto_id in (select producto_id from det_documento where documento_id=@DOCIDPIVOT)
                      and exists (select  1 
                                  from    det_documento ddegr
                                  where	  ddegr.documento_id = @DOCIDPIVOT 
                                          AND ddegr.nro_linea = @NROLINEAPIVOT
                      and ddegr.producto_id = dd.producto_id
                      and ((isnull(ddegr.nro_lote,'')='') or (ddegr.nro_lote = dd.nro_lote))
                      and ((isnull(ddegr.nro_partida,'')='') or (ddegr.nro_partida = dd.nro_partida))
                      and ((isnull(ddegr.nro_serie,'')='') or (ddegr.nro_serie = dd.nro_serie)))
                      and d.cliente_id = @pCliente_id
                      and not exists (select 1 from consumo_locator_egr where rl_id = rl.rl_id)
              UNION
              SELECT	dd.fecha_vencimiento
                      ,isnull(n.orden_locator,999) as ORDEN_PICKING
                      ,'NAV' as ubicacion
                      ,n.nave_cod as posicion
                      ,dd.cliente_id
                      ,dd.producto_id as producto
                      ,rl.cantidad
                      ,rl.rl_id
                      ,dd.NRO_BULTO
                      ,dd.NRO_LOTE
                      ,RL.EST_MERC_ID
                      ,dd.NRO_DESPACHO
                      ,dd.NRO_PARTIDA
                      ,dd.UNIDAD_ID
                      ,dd.PROP1
                      ,dd.PROP2
                      ,dd.PROP3
                      ,dd.DESCRIPCION
                      ,RL.CAT_LOG_ID
                      ,d.fecha_alta_gtw
                      ,dd.nro_serie
              FROM	  rl_det_doc_trans_posicion rl
                      inner join det_documento_transaccion ddt on(rl.doc_trans_id=ddt.doc_trans_id and rl.nro_linea_trans=ddt.nro_linea_trans)
                      inner join det_documento dd ON (ddt.documento_id=dd.documento_id AND ddt.nro_linea_doc=dd.nro_linea)
                      inner join categoria_logica cl on (rl.cliente_id=cl.cliente_id and rl.cat_log_id=cl.cat_log_id )
                      inner join nave n on (rl.nave_actual=n.nave_id)
                      left join estado_mercaderia_rl em on (rl.cliente_id=em.cliente_id and rl.est_merc_id=em.est_merc_id) 
                      inner join documento d on(dd.documento_id=d.documento_id)
              WHERE	  rl.doc_trans_id_egr is null
                      and rl.nro_linea_trans_egr is null
                      and rl.disponible='1'
                      and isnull(em.disp_egreso,'1')='1'
                      and isnull(em.picking,'1')='1'
                      and rl.cat_log_id<>'TRAN_EGR'
                      and n.disp_egreso='1' and n.pre_egreso='0' and n.pre_ingreso='0' and n.picking='1'
                      and cl.disp_egreso='1' and cl.picking='1'
                      --and dd.producto_id in (select producto_id from det_documento where documento_id=@DOCIDPIVOT)
                      and exists (select  1 
                                  from    det_documento ddegr
                                  where	  ddegr.documento_id = @DOCIDPIVOT AND ddegr.nro_linea = @NROLINEAPIVOT
                      and ddegr.producto_id = dd.producto_id
                      and ((isnull(ddegr.nro_lote,'')='') or (ddegr.nro_lote = dd.nro_lote))
                      and ((isnull(ddegr.nro_partida,'')='') or (ddegr.nro_partida = dd.nro_partida))
                      and ((isnull(ddegr.nro_serie,'')='') or (ddegr.nro_serie = dd.nro_serie)))
                      and d.cliente_id = @pCliente_id
                      and not exists (select 1 from consumo_locator_egr where rl_id = rl.rl_id)
        )X		
        order by--order by producto,dd.fecha_vencimiento asc,orden  
            (CASE WHEN 1	  = 1					            THEN X.PRODUCTO END), --Es Necesario para que quede ordenado el Found Set.
            (CASE WHEN @Crit1 = 'FECHA_VENCIMIENTO'	THEN x.FECHA_VENCIMIENTO END),
            (CASE WHEN @Crit1 = 'ORDEN_PICKING'		  THEN x.ORDEN_PICKING END),
            (CASE WHEN @Crit1 = 'NRO_BULTO'			    THEN x.NRO_BULTO END),
            (CASE WHEN @Crit1 = 'NRO_LOTE'			    THEN x.NRO_LOTE END),
            (CASE WHEN @Crit1 = 'EST_MERC_ID'		    THEN x.EST_MERC_ID END),
            (CASE WHEN @Crit1 = 'NRO_DESPACHO'		  THEN x.NRO_DESPACHO END),
            (CASE WHEN @Crit1 = 'NRO_PARTIDA'		    THEN x.NRO_PARTIDA END),
            (CASE WHEN @Crit1 = 'UNIDAD_ID'			    THEN x.UNIDAD_ID END),
            (CASE WHEN @Crit1 = 'PROP1'				      THEN x.PROP1 END),
            (CASE WHEN @Crit1 = 'PROP2'				      THEN x.PROP2 END),
            (CASE WHEN @Crit1 = 'PROP3'				      THEN x.PROP3 END),
            (CASE WHEN @Crit1 = 'CAT_LOG_ID'		    THEN x.CAT_LOG_ID END),
            (CASE WHEN @Crit1 = 'FECHA_ALTA_GTW'	  THEN x.FECHA_ALTA_GTW END),
            --2
            (CASE WHEN @Crit2 = 'FECHA_VENCIMIENTO'	THEN x.FECHA_VENCIMIENTO END),
            (CASE WHEN @Crit2 = 'ORDEN_PICKING'		  THEN x.ORDEN_PICKING END),
            (CASE WHEN @Crit2 = 'NRO_BULTO'			    THEN x.NRO_BULTO END),
            (CASE WHEN @Crit2 = 'NRO_LOTE'			    THEN x.NRO_LOTE END),
            (CASE WHEN @Crit2 = 'EST_MERC_ID'		    THEN x.EST_MERC_ID END),
            (CASE WHEN @Crit2 = 'NRO_DESPACHO'		  THEN x.NRO_DESPACHO END),
            (CASE WHEN @Crit2 = 'NRO_PARTIDA'		    THEN x.NRO_PARTIDA END),
            (CASE WHEN @Crit2 = 'UNIDAD_ID'			    THEN x.UNIDAD_ID END),
            (CASE WHEN @Crit2 = 'PROP1'				      THEN x.PROP1 END),
            (CASE WHEN @Crit2 = 'PROP2'				      THEN x.PROP2 END),
            (CASE WHEN @Crit2 = 'PROP3'				      THEN x.PROP3 END),
            (CASE WHEN @Crit2 = 'CAT_LOG_ID'		    THEN x.CAT_LOG_ID END),
            (CASE WHEN @Crit2 = 'FECHA_ALTA_GTW'	  THEN x.FECHA_ALTA_GTW END),
            --3
            (CASE WHEN @Crit3 = 'FECHA_VENCIMIENTO'	THEN x.FECHA_VENCIMIENTO END),
            (CASE WHEN @Crit3 = 'ORDEN_PICKING'		  THEN x.ORDEN_PICKING END),
            (CASE WHEN @Crit3 = 'NRO_BULTO'			    THEN x.NRO_BULTO END),
            (CASE WHEN @Crit3 = 'NRO_LOTE'			    THEN x.NRO_LOTE END),
            (CASE WHEN @Crit3 = 'EST_MERC_ID'		    THEN x.EST_MERC_ID END),
            (CASE WHEN @Crit3 = 'NRO_DESPACHO'		  THEN x.NRO_DESPACHO END),
            (CASE WHEN @Crit3 = 'NRO_PARTIDA'		    THEN x.NRO_PARTIDA END),
            (CASE WHEN @Crit3 = 'UNIDAD_ID'			    THEN x.UNIDAD_ID END),
            (CASE WHEN @Crit3 = 'PROP1'				      THEN x.PROP1 END),
            (CASE WHEN @Crit3 = 'PROP2'				      THEN x.PROP2 END),
            (CASE WHEN @Crit3 = 'PROP3'				      THEN x.PROP3 END),
            (CASE WHEN @Crit3 = 'CAT_LOG_ID'		    THEN x.CAT_LOG_ID END),
            (CASE WHEN @Crit3 = 'FECHA_ALTA_GTW'	  THEN x.FECHA_ALTA_GTW END)
        
    Open @RsExist
    Fetch Next From @RsExist into	@Fecha_Vto,
                    @OrdenPicking,
                    @Tipo_Posicion,
                    @Codigo_Posicion,
                    @pCliente_id,
                    @Producto_id,
                    @Cantidad,
                    @vRl_id,
                    @NRO_BULTO,
                    @NRO_LOTE,				
                    @EST_MERC_ID,			
                    @NRO_DESPACHO,		
                    @NRO_PARTIDA,			
                    @UNIDAD_ID,			
                    @PROP1,					
                    @PROP2,					
                    @PROP3,
                    @DESC,
                    @CAT_LOG_ID,
                    @fecha_alta_gtw,
                    @nro_serie
  
  
    While @@Fetch_Status=0 AND @vQtyResto>0
    Begin	
  
      if (@vQtyResto>0) begin   
         if (@vQtyResto>=@Cantidad) begin
            set @vNroLinea=isnull((select max(nro_linea) from consumo_locator_egr where documento_id = @DOCIDPIVOT),0)+1
            set @vQtyResto=@vQtyResto-@Cantidad
            insert into consumo_locator_egr (documento_id,nro_linea,cliente_id,producto_id,cantidad,rl_id,saldo,tipo,fecha,procesado) 
                  values  (@DOCIDPIVOT,@vNroLinea,@pCliente_id,@Producto_id,@Cantidad,@vRl_id,0,'1',getdate(),'N')
            --Insert con todas las propiedades en det_documento
            insert into det_documento_aux 
                (	documento_id,nro_linea,cliente_id,producto_id,cantidad,est_merc_id,
                  cat_log_id,nro_bulto,descripcion,nro_lote,fecha_vencimiento,nro_despacho,nro_partida,
                  unidad_id,tie_in,item_ok,cat_log_id_final,prop1,prop2,prop3,cant_solicitada,nro_serie)
            values  (@DOCIDPIVOT,@vNroLinea,@pCliente_id,@Producto_id,@Cantidad,@EST_MERC_ID,'TRAN_EGR',@NRO_BULTO,@DESC
                ,@NRO_LOTE,@Fecha_Vto,@NRO_DESPACHO,@NRO_PARTIDA,@UNIDAD_ID,'0'
                ,'1',@CAT_LOG_ID,@PROP1,@PROP2,@PROP3,@QtySol,@nro_serie)	
  
              
          end
          else begin
            set @vNroLinea=isnull((select max(nro_linea) from consumo_locator_egr where documento_id = @DOCIDPIVOT),0)+1
            insert into consumo_locator_egr (documento_id,nro_linea,cliente_id,producto_id,cantidad,rl_id,saldo,tipo,fecha,procesado)
                  values  (@DOCIDPIVOT,@vNroLinea,@pCliente_id,@Producto_id,@vQtyResto,@vRl_id,0,'2',getdate(),'N')
            --Insert con todas las propiedades en det_documento
            insert into det_documento_aux (
                  documento_id,nro_linea,cliente_id,producto_id,cantidad,est_merc_id,
                  cat_log_id,nro_bulto,descripcion,nro_lote,fecha_vencimiento,nro_despacho,nro_partida,
                  unidad_id,tie_in,item_ok,cat_log_id_final,prop1,prop2,prop3,cant_solicitada,nro_serie)
                  values 
                  (@DOCIDPIVOT,@vNroLinea
                  ,@pCliente_id,@Producto_id,@vQtyResto,@EST_MERC_ID,'TRAN_EGR',@NRO_BULTO,@DESC
                  ,@NRO_LOTE,@Fecha_Vto,@NRO_DESPACHO,@NRO_PARTIDA,@UNIDAD_ID,'0'
                  ,'1',@CAT_LOG_ID,@PROP1,@PROP2,@PROP3,@QtySol,@nro_serie)	
            
            --este procedimiento realiza un split en RL, deja la cantidad que se neceista en la RL actual y genera una nueva RL con el resto.
            EXEC SPLIT_RL_CONSUMO_EGRESO @vRl_id, @vQtyResto
  
            set @vQtyResto=0
          end --if
      end --if
      Fetch Next From @RsExist into	@Fecha_Vto,
                      @OrdenPicking,
                      @Tipo_Posicion,
                      @Codigo_Posicion,
                      @pCliente_id,
                      @Producto_id,
                      @Cantidad,
                      @vRl_id,
                      @NRO_BULTO,
                      @NRO_LOTE,				
                      @EST_MERC_ID,			
                      @NRO_DESPACHO,		
                      @NRO_PARTIDA,			
                      @UNIDAD_ID,			
                      @PROP1,					
                      @PROP2,					
                      @PROP3,
                      @DESC,
                      @CAT_LOG_ID,
                      @fecha_alta_gtw,
                      @nro_serie
    End	--End While @RsExist.
  
    CLOSE @RsExist
    DEALLOCATE @RsExist
    
    
    FETCH NEXT FROM @RSDOCEGR INTO @DOCIDPIVOT, @NROLINEAPIVOT, @PESOPROPS
  END
  CLOSE @RSDOCEGR
  DEALLOCATE @RSDOCEGR
  
  
  --GUARDO SERIES INICIALES
  --SELECT DISTINCT NRO_SERIE INTO #TMPSERIES FROM DET_DOCUMENTO WHERE DOCUMENTO_ID = @DOCIDPIVOT
  
  --Borro det_documento y lo vuelvo a insertar con las nuevas propiedades
  DECLARE @CURDOCS CURSOR
  SET @CURDOCS = CURSOR FOR
    select DISTINCT DD.DOCUMENTO_ID
    FROM DET_DOCUMENTO DD
    INNER JOIN DOCUMENTO D ON (DD.CLIENTE_ID = D.CLIENTE_ID AND DD.DOCUMENTO_ID = D.DOCUMENTO_ID)
    WHERE D.CLIENTE_ID = @pCliente_id AND D.NRO_DESPACHO_IMPORTACION = @pViaje_id
    order by DD.documento_id
  
  OPEN @CURDOCS
  FETCH NEXT FROM @CURDOCS INTO @DOCIDPIVOT
  WHILE @@FETCH_STATUS = 0
  BEGIN
  
  
    delete det_documento where documento_id = @DOCIDPIVOT
    insert into det_documento select * from det_documento_aux where documento_id=@DOCIDPIVOT
  
  
    update documento set status='D20' where documento_id=@DOCIDPIVOT
    Exec Asigna_Tratamiento#Asigna_Tratamiento_EGR @DOCIDPIVOT
    select distinct @Doc_Trans=doc_trans_id from det_documento_transaccion where documento_id=@DOCIDPIVOT
    --Hago la reserva en RL
    Set @RsActuRL = Cursor For select [id],documento_id,Nro_Linea,Cliente_id,Producto_id,Cantidad,rl_id,saldo,tipo from consumo_locator_egr where procesado='N' and Documento_id=@DOCIDPIVOT
    Open @RsActuRL
    Fetch Next From @RsActuRL into 
                        @id,
                        @Documento_id,
                        @vNroLinea,
                        @pCliente_id,
                        @Producto_id,
                        @Cantidad,
                        @vRl_id,
                        @Saldo,
                        @TipoSaldo
  
    While @@Fetch_Status=0
    Begin
      if (@Saldo=0) begin
        update rl_det_doc_trans_posicion set doc_trans_id_egr=@Doc_Trans, nro_linea_trans_egr=@vNroLinea,disponible='0'
                                ,cat_log_id='TRAN_EGR',nave_anterior=nave_actual,posicion_anterior=posicion_actual
                                ,nave_actual='2',posicion_actual=null where rl_id=@vRl_id
        update consumo_locator_egr set procesado='S' where [id]=@id
      end --if	
  
      if (@Saldo>0) begin
        insert into rl_det_doc_trans_posicion (doc_trans_id,nro_linea_trans,posicion_anterior,posicion_actual,cantidad,tipo_movimiento_id,
                                  ultima_estacion,ultima_secuencia,nave_anterior,nave_actual,documento_id,nro_linea,
                                  disponible,doc_trans_id_egr,nro_linea_trans_egr,doc_trans_id_tr,nro_linea_trans_tr,
                                  cliente_id,cat_log_id,cat_log_id_final,est_merc_id)
                select doc_trans_id,nro_linea_trans,posicion_anterior,posicion_actual,@Saldo,tipo_movimiento_id,
                    ultima_estacion,ultima_secuencia,nave_anterior,nave_actual,documento_id,nro_linea,
                    disponible,doc_trans_id_egr,nro_linea_trans_egr,doc_trans_id_tr,nro_linea_trans_tr,
                    cliente_id,cat_log_id,cat_log_id_final,est_merc_id
                from rl_det_doc_trans_posicion 
                where rl_id=@vRl_id 	
        update rl_det_doc_trans_posicion set cantidad=@Cantidad,doc_trans_id_egr=@Doc_Trans, nro_linea_trans_egr=@vNroLinea,disponible='0'
                                ,cat_log_id='TRAN_EGR',nave_anterior=nave_actual,posicion_anterior=posicion_actual
                                ,nave_actual='2',posicion_actual=null where rl_id=@vRl_id
        update consumo_locator_egr set procesado='S' where [id]=@id
      end --if	
  
      Fetch Next From @RsActuRL into 
                        @id,
                        @Documento_id,
                        @vNroLinea,
                        @pCliente_id,
                        @Producto_id,
                        @Cantidad,
                        @vRl_id,
                        @Saldo,
                        @TipoSaldo
    End	--End While @RsActuRL.
    CLOSE @RsActuRL
    DEALLOCATE @RsActuRL
  
    --Si no hay existencia de ningun producto del documento lo borro para que no quede solo cabecera
    select @QtyDetDocumento=count(documento_id) from det_documento where documento_id=@DOCIDPIVOT
    if (@QtyDetDocumento=0) begin
      delete documento where documento_id=@DOCIDPIVOT 
    end else begin
      select @vUsuario_id=usuario_id, @vTerminal=Terminal from #temp_usuario_loggin
      insert into docxviajesprocesados values (@pViaje_id,@DOCIDPIVOT,'P',getdate(),@vUsuario_id,@vTerminal)
    end --if
  
    FETCH NEXT FROM @CURDOCS INTO @DOCIDPIVOT
  END
  
  CLOSE @CURDOCS
  DEALLOCATE @CURDOCS
  Set NoCount Off;
End -- Fin Procedure.
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

/*
Fecha:			26-01-2013.
Comentarios:	Procedure creado para poder splitear una rl en el proceso de cambio de contenedoras, este procedure solamente
				splitea, para ello se pasa el argumento rl_id que sera utilizado para insertar la nueva rl y restar la cantidad
				indicada en el argumento "cantidad".
				En caso de que exista un error se devolvera en el argumento pError, si al retornar devuelve "1" indica que ocurrio
				un error, si devuelve 0 indica que se proceso correctamente.

*/
CREATE procedure Dbo.Mob_CambioContenedora_split_rl
	@rl_id		numeric(20,0),
	@cantidad	numeric(20,5),
	@new_rl		numeric(20,0)	Output,
	@pError		char(1)			Output
As
Begin
	declare		@cant_rl	Numeric(20,5)
	Begin Try

		Select @Cant_rl=cantidad from rl_det_doc_trans_posicion where rl_id=@rl_id;

		If(@Cant_rl<@Cantidad)
		begin
			raiserror('La Rl indicada tiene una cantidad menor a la cantidad a splitear',16,1);	
		end;
		IF (@Cant_rl<>@Cantidad)
		BEGIN 
			insert into rl_det_doc_trans_posicion(
				DOC_TRANS_ID,	NRO_LINEA_TRANS,	POSICION_ANTERIOR,	POSICION_ACTUAL,
				CANTIDAD,		TIPO_MOVIMIENTO_ID,	ULTIMA_ESTACION,	ULTIMA_SECUENCIA,	NAVE_ANTERIOR,
				NAVE_ACTUAL,	DOCUMENTO_ID,		NRO_LINEA,			DISPONIBLE,			DOC_TRANS_ID_EGR,
				NRO_LINEA_TRANS_EGR,				DOC_TRANS_ID_TR,	NRO_LINEA_TRANS_TR,	CLIENTE_ID,
				CAT_LOG_ID,		CAT_LOG_ID_FINAL,	EST_MERC_ID
			)	
			select	DOC_TRANS_ID,		NRO_LINEA_TRANS,	POSICION_ANTERIOR,
					POSICION_ACTUAL,	@Cantidad,			TIPO_MOVIMIENTO_ID,
					ULTIMA_ESTACION,	ULTIMA_SECUENCIA,	NAVE_ANTERIOR,
					NAVE_ACTUAL,		DOCUMENTO_ID,		NRO_LINEA,
					DISPONIBLE,			DOC_TRANS_ID_EGR,	NRO_LINEA_TRANS_EGR,
					DOC_TRANS_ID_TR,	NRO_LINEA_TRANS_TR,	CLIENTE_ID,
					CAT_LOG_ID,			CAT_LOG_ID_FINAL,	EST_MERC_ID
			From	Rl_det_doc_trans_posicion
			where	rl_id=@rl_id;
			
			Set @New_Rl=SCOPE_IDENTITY();

			Update	Rl_Det_Doc_Trans_posicion 
			Set		Cantidad=Cantidad-@Cantidad
			where	rl_id=@rl_id;
		END
		ELSE
		BEGIN
			SET @New_Rl=@rl_id
		END
		Set @pError='0'
	End Try
	Begin Catch
		Set @pError='1'
	End Catch
End
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE DBO.MOB_CAMBIO_CONTENEDORA
	@NEWRL_ID		NUMERIC(20,0),
	@VIAJE_ID		VARCHAR(100),
	@PRODUCTO_ID	VARCHAR(30),
	@CANTIDAD		NUMERIC(20,5),
	@USR			VARCHAR(20)
AS
BEGIN
	-----------------------------------------------------------
	--SEGMENTO PARA LA DECLARACION DE LA VARIABLES UTILIZADAS.
	-----------------------------------------------------------
	DECLARE @CURPICK			cursor;
	DECLARE	@DOCUMENTO_ID		numeric(20,0)
	DECLARE @NRO_LINEA			numeric(10,0)
	DECLARE @CLIENTE_ID			varchar(15)
	DECLARE @NRO_SERIE			varchar(50)
	DECLARE @NRO_SERIE_PADRE	varchar(50)
	DECLARE @EST_MERC_ID		varchar(15)
	DECLARE @CAT_LOG_ID			varchar(50)
	DECLARE @NRO_BULTO			varchar(50)
	DECLARE @DESCRIPCION		varchar(200)
	DECLARE @NRO_LOTE			varchar(50)
	DECLARE @FECHA_VENCIMIENTO	datetime
	DECLARE @NRO_DESPACHO		varchar(50)
	DECLARE @NRO_PARTIDA		varchar(50)
	DECLARE @UNIDAD_ID			varchar(5)
	DECLARE @PESO				numeric(20)
	DECLARE @UNIDAD_PESO		varchar(5)
	DECLARE @VOLUMEN			numeric(20)
	DECLARE @UNIDAD_VOLUMEN		varchar(5)
	DECLARE @BUSC_INDIVIDUAL	varchar(1)
	DECLARE @TIE_IN				varchar(1)
	DECLARE @NRO_TIE_IN_PADRE	varchar(100)
	DECLARE @NRO_TIE_IN			varchar(100)
	DECLARE @ITEM_OK			varchar(1)
	DECLARE @CAT_LOG_ID_FINAL	varchar(50)
	DECLARE @MONEDA_ID			varchar(20)
	DECLARE @COSTO				numeric(10)
	DECLARE @PROP1				varchar(100)
	DECLARE @PROP2				varchar(100)
	DECLARE @PROP3				varchar(100)
	DECLARE @LARGO				numeric(10)
	DECLARE @ALTO				numeric(10)
	DECLARE @ANCHO				numeric(10)
	DECLARE @VOLUMEN_UNITARIO	varchar(1)
	DECLARE @PESO_UNITARIO		varchar(1)
	DECLARE @CANT_SOLICITADA	numeric(20)
	DECLARE @TRACE_BACK_ORDER	varchar(1)
	DECLARE @POSICION_COD		varchar(45)
	DECLARE @NAVE_COD			varchar(45)
	DECLARE @QTY_PICK			numeric(20,5)
	DECLARE @OLD_RL_ID			numeric(20,0)
	DECLARE @NRL_ID				numeric(20,0)
	DECLARE @ERROR				char(1)
	DECLARE @DOC_TRANS_ID		numeric(20,0)
	DECLARE @NRO_LINEA_TRANS	numeric(20,0)
	DECLARE @VCANTIDAD			numeric(20,5)
	DECLARE	@CANT_RL			numeric(20,5)
	DECLARE @PICKING_ID			numeric(20,0)
	DECLARE @OUT_SP				char(1)
	DECLARE @DSPLIT				numeric(20,5)
	DECLARE @SUM_PIK			numeric(20,5)
	DECLARE @T_TOM				numeric(20,0)
	DECLARE @T_NTOM				numeric(20,0)
	DECLARE @PALLET_PICKING		numeric(20,0)
	DECLARE @FECHA_INICIO		datetime
	-----------------------------------------------------------
	--COMIENZO UNA TRANSACCION PARA TODO EL SP.
	-----------------------------------------------------------
	BEGIN TRANSACTION

	SET @VCANTIDAD=@CANTIDAD;
	-----------------------------------------------------------------------------------------------------------------------------------
	--RECUPERO EN VARIABLES TODAS LAS CARACTERISTICAS DE LA NUEVA RL POR LA QUE ESTOY REALIZANDO EL CAMBIO DE CONTENEDORA.
	-----------------------------------------------------------------------------------------------------------------------------------
	SELECT	 @CLIENTE_ID		=DD.CLIENTE_ID			,@NRO_SERIE			=DD.NRO_SERIE		,@NRO_SERIE_PADRE	=DD.NRO_SERIE_PADRE
			,@EST_MERC_ID		=RL.EST_MERC_ID			,@CAT_LOG_ID		='TRAN_EGR'			,@NRO_BULTO			=DD.NRO_BULTO
			,@DESCRIPCION		=DD.DESCRIPCION			,@NRO_LOTE			=DD.NRO_LOTE		,@FECHA_VENCIMIENTO	=DD.FECHA_VENCIMIENTO
			,@NRO_DESPACHO		=DD.NRO_DESPACHO		,@NRO_PARTIDA		=DD.NRO_PARTIDA		,@UNIDAD_ID			=DD.UNIDAD_ID
			,@PESO				=DD.PESO				,@UNIDAD_PESO		=DD.UNIDAD_PESO		,@VOLUMEN			=DD.VOLUMEN
			,@UNIDAD_VOLUMEN	=DD.UNIDAD_VOLUMEN		,@BUSC_INDIVIDUAL	=DD.BUSC_INDIVIDUAL	,@TIE_IN			=ISNULL(DD.TIE_IN,'0')
			,@NRO_TIE_IN_PADRE	=DD.NRO_TIE_IN_PADRE	,@NRO_TIE_IN		=DD.NRO_TIE_IN		,@ITEM_OK			=DD.ITEM_OK
			,@CAT_LOG_ID_FINAL	=RL.CAT_LOG_ID			,@MONEDA_ID			=DD.MONEDA_ID		,@COSTO				=DD.COSTO
			,@PROP1				=DD.PROP1				,@PROP2				=DD.PROP2			,@PROP3				=DD.PROP3
			,@LARGO				=DD.LARGO				,@ALTO				=DD.ALTO			,@ANCHO				=DD.ANCHO
			,@VOLUMEN_UNITARIO	=DD.VOLUMEN_UNITARIO	,@PESO_UNITARIO		=DD.PESO_UNITARIO	,@CANT_SOLICITADA	=DD.CANT_SOLICITADA
			,@TRACE_BACK_ORDER	=DD.TRACE_BACK_ORDER	,@NAVE_COD			=ISNULL(N.NAVE_COD,N2.NAVE_COD)
			,@POSICION_COD		=ISNULL(P.POSICION_COD,N2.NAVE_COD)
	FROM	RL_DET_DOC_TRANS_POSICION RL INNER JOIN DET_DOCUMENTO_TRANSACCION DDT	ON(RL.DOC_TRANS_ID=DDT.DOC_TRANS_ID AND RL.NRO_LINEA_TRANS=DDT.NRO_LINEA_TRANS)
			INNER JOIN DET_DOCUMENTO DD												ON(DDT.DOCUMENTO_ID=DD.DOCUMENTO_ID AND DDT.NRO_LINEA_DOC=DD.NRO_LINEA)
			LEFT JOIN POSICION P													ON(RL.POSICION_ACTUAL=P.POSICION_ID)
			LEFT JOIN NAVE N														ON(P.NAVE_ID=N.NAVE_ID)
			LEFT JOIN NAVE N2														ON(RL.NAVE_ACTUAL=N2.NAVE_ID)
	WHERE	RL.RL_ID=@NEWRL_ID;
	-----------------------------------------------------------------------------------------------------------------------------------
	BEGIN TRY
		--Tengo que saber si voy por un solo cambio o si voy por todos los picking.
			SELECT	@SUM_PIK=sum(P.CANTIDAD)
			FROM	PICKING P
			WHERE	P.VIAJE_ID=@VIAJE_ID
					AND P.PRODUCTO_ID=@PRODUCTO_ID
					AND P.USUARIO=@USR
					AND P.FECHA_INICIO IS NOT NULL
					AND P.FECHA_FIN IS NULL;		

		-----------------------------------------------------------------------------------------------------------------------------------
		--COMO PUEDE TENER MAS DE UNA LINEA DE PICKING LEVANTO UN CURSOR PARA HACER LOS CAMBIOS.
		-----------------------------------------------------------------------------------------------------------------------------------
		IF(@SUM_PIK>=@CANTIDAD)
		BEGIN 
			SET @CURPICK=CURSOR FOR
				SELECT	 P.DOCUMENTO_ID
						,P.NRO_LINEA
						,P.CANTIDAD
						,P.PICKING_ID
				FROM	PICKING P
				WHERE	P.VIAJE_ID=@VIAJE_ID
						AND P.PRODUCTO_ID=@PRODUCTO_ID
						AND P.USUARIO=@USR
						AND P.FECHA_INICIO IS NOT NULL
						AND P.FECHA_FIN IS NULL;
		END
		ELSE
		BEGIN
			IF(@CANTIDAD>@SUM_PIK)
			BEGIN
				SET @CURPICK=CURSOR FOR
					SELECT	 P.DOCUMENTO_ID
							,P.NRO_LINEA
							,P.CANTIDAD
							,P.PICKING_ID
					FROM	PICKING P
					WHERE	P.VIAJE_ID=@VIAJE_ID
							AND P.PRODUCTO_ID=@PRODUCTO_ID
							AND P.CANT_CONFIRMADA IS NULL;			
			END
		END
		OPEN @CURPICK
		FETCH NEXT FROM @CURPICK INTO @DOCUMENTO_ID,@NRO_LINEA,@QTY_PICK,@PICKING_ID
		WHILE @@FETCH_STATUS=0
		BEGIN
			IF(@VCANTIDAD-@QTY_PICK)<0
			BEGIN
				--ESTO INDICA QUE ES PARCIALIZADO Y SACO EL VALOR ABSOLUTO DEL RESULTADO.
				SET @DSPLIT=ABS(@VCANTIDAD-@QTY_PICK)
				
				EXEC DBO.SPLIT_PICKING_CONTENEDORA @PICKING_ID,@DSPLIT, @OUT_SP OUTPUT
				IF(@OUT_SP<>'0')
				BEGIN
					RAISERROR('SPLIT_PICKING_CONTENEDORA - Error crear registros remanentes.',16,1)
				END
			END
			--------------------------------------------------------------------------------------------------------------
			--REALIZO CAMBIO EN LA TABLA DE PICKING.
			--------------------------------------------------------------------------------------------------------------
			UPDATE	PICKING	SET	NAVE_COD=@NAVE_COD, POSICION_COD=@POSICION_COD, 
								NRO_LOTE=@NRO_LOTE, NRO_PARTIDA=@NRO_PARTIDA,
								NRO_SERIE=@NRO_SERIE
			WHERE	DOCUMENTO_ID=@DOCUMENTO_ID AND NRO_LINEA=@NRO_LINEA;
			--------------------------------------------------------------------------------------------------------------
			--REALIZO CAMBIOS EN LA TABLA DET_DOCUMENTO.
			--------------------------------------------------------------------------------------------------------------
			UPDATE	DET_DOCUMENTO 
			SET		 NRO_SERIE			=@NRO_SERIE			,NRO_SERIE_PADRE	=@NRO_SERIE_PADRE		,EST_MERC_ID		=@EST_MERC_ID
					,CAT_LOG_ID			=@CAT_LOG_ID		,NRO_BULTO			=@NRO_BULTO				,NRO_LOTE			=@NRO_LOTE
					,FECHA_VENCIMIENTO	=@FECHA_VENCIMIENTO	,NRO_DESPACHO		=@NRO_DESPACHO			,NRO_PARTIDA		=@NRO_PARTIDA
					,UNIDAD_ID			=@UNIDAD_ID			,PESO				=@PESO					,UNIDAD_PESO		=@UNIDAD_PESO
					,VOLUMEN			=@VOLUMEN			,UNIDAD_VOLUMEN		=@UNIDAD_VOLUMEN		,BUSC_INDIVIDUAL	=@BUSC_INDIVIDUAL
					,TIE_IN				=@TIE_IN			,NRO_TIE_IN_PADRE	=@NRO_TIE_IN_PADRE		,NRO_TIE_IN			=@NRO_TIE_IN
					,ITEM_OK			=@ITEM_OK			,CAT_LOG_ID_FINAL	=@CAT_LOG_ID_FINAL		,MONEDA_ID			=@MONEDA_ID
					,COSTO				=@COSTO				,PROP1				=@PROP1					,PROP2				=@PROP2
					,PROP3				=@PROP3				,LARGO				=@LARGO					,ALTO				=@ALTO
					,ANCHO				=@ANCHO				,VOLUMEN_UNITARIO	=@VOLUMEN_UNITARIO		,PESO_UNITARIO		=@PESO_UNITARIO
					,CANT_SOLICITADA	=@CANT_SOLICITADA	,TRACE_BACK_ORDER	=@TRACE_BACK_ORDER
			WHERE	DOCUMENTO_ID=@DOCUMENTO_ID AND NRO_LINEA=@NRO_LINEA;
			--------------------------------------------------------------------------------------------------------------
			--TENGO QUE LIBERAR LA RL QUE SE TOMO ANTERIORMENTE Y DEJARLA EN LA NAVE DE ANTERIOR PARA SACARLO DE LA NAVE PRE-EGRESO.
			--------------------------------------------------------------------------------------------------------------
			SELECT	@OLD_RL_ID=RL.RL_ID,@DOC_TRANS_ID=DDT.DOC_TRANS_ID,@NRO_LINEA_TRANS=DDT.NRO_LINEA_TRANS
			FROM	DET_DOCUMENTO DD INNER JOIN DET_DOCUMENTO_TRANSACCION DDT
					ON(DD.DOCUMENTO_ID=DDT.DOCUMENTO_ID AND DD.NRO_LINEA=DDT.NRO_LINEA_DOC)
					INNER JOIN RL_DET_DOC_TRANS_POSICION RL
					ON(DDT.DOC_TRANS_ID=RL.DOC_TRANS_ID_EGR AND DDT.NRO_LINEA_TRANS=RL.NRO_LINEA_TRANS_EGR)
			WHERE	DD.DOCUMENTO_ID=@DOCUMENTO_ID AND DD.NRO_LINEA=@NRO_LINEA;
			
			--QUITO EL CONSUMO DE LA TABLA.
			DELETE FROM CONSUMO_LOCATOR_EGR WHERE DOCUMENTO_ID=@DOCUMENTO_ID;
			
			--LIBERO LA RL AFECTADA.			
			UPDATE	RL_DET_DOC_TRANS_POSICION 
			SET		POSICION_ACTUAL=POSICION_ANTERIOR,
					POSICION_ANTERIOR=NULL,
					DISPONIBLE='1',
					NAVE_ACTUAL=NAVE_ANTERIOR,
					NAVE_ANTERIOR='1',
					CAT_LOG_ID='DISPONIBLE',
					DOC_TRANS_ID_EGR=NULL,
					NRO_LINEA_TRANS_EGR=NULL
			WHERE	RL_ID=@OLD_RL_ID

			--PARTICIONO LA RL DE ACUERDO A MIS NECESIDADES.
			IF (@CANTIDAD<@QTY_PICK)
			BEGIN
				EXEC	DBO.MOB_CAMBIOCONTENEDORA_SPLIT_RL @NEWRL_ID, @CANTIDAD, @NRL_ID OUTPUT, @ERROR OUTPUT
			END
			ELSE
			BEGIN
				IF(@VCANTIDAD-@QTY_PICK)>0
				BEGIN
					EXEC	DBO.MOB_CAMBIOCONTENEDORA_SPLIT_RL @NEWRL_ID, @QTY_PICK, @NRL_ID OUTPUT, @ERROR OUTPUT
				END
				ELSE
				BEGIN
					EXEC	DBO.MOB_CAMBIOCONTENEDORA_SPLIT_RL @NEWRL_ID, @VCANTIDAD, @NRL_ID OUTPUT, @ERROR OUTPUT
				END
			END
			
			IF @ERROR='1'
			BEGIN
				RAISERROR('OCURRIO UN ERROR INESPERADO AL EJECUTAR MOB_CAMBIOCONTENEDORA_SPLIT_RL.',16,1)
			END 
			--TOMO LA RL PARA CONSUMIRLA.
			UPDATE RL_DET_DOC_TRANS_POSICION
			SET		POSICION_ANTERIOR=POSICION_ACTUAL,
					POSICION_ACTUAL=NULL,
					DISPONIBLE='0',
					NAVE_ANTERIOR=NAVE_ACTUAL,
					NAVE_ACTUAL='2',
					CAT_LOG_ID='TRAN_EGR',
					DOC_TRANS_ID_EGR=@DOC_TRANS_ID,
					NRO_LINEA_TRANS_EGR=@NRO_LINEA_TRANS
			WHERE	RL_ID=@NRL_ID;
			
			--GENERO EL CONSUMO EN RL.
			INSERT INTO CONSUMO_LOCATOR_EGR (DOCUMENTO_ID	,NRO_LINEA	,CLIENTE_ID	,PRODUCTO_ID	,CANTIDAD	,RL_ID	,SALDO	,TIPO	,FECHA		,PROCESADO) 
			SELECT  DD.DOCUMENTO_ID,DD.NRO_LINEA, DD.CLIENTE_ID,DD.PRODUCTO_ID,
					RL.CANTIDAD,RL.RL_ID,0,1,GETDATE(),'S'
			FROM    DET_DOCUMENTO DD INNER JOIN DET_DOCUMENTO_TRANSACCION DDT
					ON(DD.DOCUMENTO_ID=DDT.DOCUMENTO_ID AND DD.NRO_LINEA=DDT.NRO_LINEA_DOC)
					INNER JOIN RL_DET_DOC_TRANS_POSICION RL
					ON(DDT.DOC_TRANS_ID=RL.DOC_TRANS_ID_EGR AND DDT.NRO_LINEA_TRANS=RL.NRO_LINEA_TRANS_EGR)
			WHERE   DD.DOCUMENTO_ID=@DOCUMENTO_ID
			
			SET @VCANTIDAD=@VCANTIDAD-@QTY_PICK
			
			IF (@VCANTIDAD<=0)
			BEGIN
				BREAK
			END 
			FETCH NEXT FROM @CURPICK INTO @DOCUMENTO_ID,@NRO_LINEA,@QTY_PICK,@PICKING_ID
		END--FIN LOOP CURSOR.
		CLOSE @CURPICK
		DEALLOCATE @CURPICK
		----------------------------------------------------------
		--PARA MANTENER TODAS LAS TAREAS TOMADAS SI CORRESPONDE.
		----------------------------------------------------------
		SELECT	@T_TOM			=COUNT(P.PRODUCTO_ID),
				@POSICION_COD	=P.POSICION_COD,
				@NRO_BULTO		=DD.NRO_BULTO,
				@NRO_LOTE		=P.NRO_LOTE, 
				@NRO_PARTIDA	=P.NRO_PARTIDA,
				@PALLET_PICKING	=P.PALLET_PICKING,
				@FECHA_INICIO	=P.FECHA_INICIO
		FROM	PICKING P INNER JOIN DET_DOCUMENTO DD
				ON(P.DOCUMENTO_ID=DD.DOCUMENTO_ID AND P.NRO_LINEA=DD.NRO_LINEA)
		WHERE	VIAJE_ID=@VIAJE_ID
				AND USUARIO	=@USR
				AND P.PRODUCTO_ID=@PRODUCTO_ID
				AND FECHA_INICIO IS NOT NULL
		GROUP BY
				P.VIAJE_ID,P.PRODUCTO_ID,P.POSICION_COD,DD.NRO_BULTO,P.NRO_LOTE, P.NRO_PARTIDA,P.PALLET_PICKING,P.FECHA_INICIO


		SELECT	@T_NTOM			=COUNT(P.PRODUCTO_ID)
		FROM	PICKING P INNER JOIN DET_DOCUMENTO DD
				ON(P.DOCUMENTO_ID=DD.DOCUMENTO_ID AND P.NRO_LINEA=DD.NRO_LINEA)
		WHERE	P.VIAJE_ID=@VIAJE_ID
				AND P.PRODUCTO_ID=@PRODUCTO_ID
				AND P.POSICION_COD=@POSICION_COD
				AND ((@NRO_BULTO IS NULL)OR(DD.NRO_BULTO=@NRO_BULTO))
				AND ((@NRO_LOTE IS NULL)OR(P.NRO_LOTE=@NRO_LOTE))
				AND ((@NRO_PARTIDA IS NULL)OR(P.NRO_PARTIDA=@NRO_PARTIDA))
		GROUP BY
				P.VIAJE_ID,P.PRODUCTO_ID,P.POSICION_COD,DD.NRO_BULTO,P.NRO_LOTE, P.NRO_PARTIDA
		IF(@T_TOM<>@T_NTOM)AND(@CANTIDAD>@SUM_PIK)
		BEGIN
			UPDATE	PICKING SET USUARIO=@USR, PALLET_PICKING=@PALLET_PICKING,FECHA_INICIO=@FECHA_INICIO
			FROM	PICKING P INNER JOIN DET_DOCUMENTO DD
					ON(P.DOCUMENTO_ID=DD.DOCUMENTO_ID AND P.NRO_LINEA=DD.NRO_LINEA)
			WHERE	P.VIAJE_ID=@VIAJE_ID
					AND P.PRODUCTO_ID=@PRODUCTO_ID
					AND P.POSICION_COD=@POSICION_COD
					AND ((@NRO_BULTO IS NULL)OR(DD.NRO_BULTO=@NRO_BULTO))
					AND ((@NRO_LOTE IS NULL)OR(P.NRO_LOTE=@NRO_LOTE))
					AND ((@NRO_PARTIDA IS NULL)OR(P.NRO_PARTIDA=@NRO_PARTIDA))
		END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		EXEC usp_RethrowError
	END CATCH; --FIN CONTROL ERRORES
END--FIN DEL PROCEDIMIENTO ALMACENADO.
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Mob_Consulta_Ing_Detalle]
	@Documento_Id	Numeric(20,0)

AS
BEGIN
	SET NOCOUNT ON
	SET XACT_ABORT ON
	
	DECLARE @COUNT AS INT
	

	SELECT @COUNT= COUNT(*)
		FROM DOCUMENTO D 
		WHERE D.DOCUMENTO_ID=@Documento_Id AND D.TIPO_OPERACION_ID='ING'
			AND D.STATUS<'D30'
	
	IF @COUNT =0
	BEGIN
		RAISERROR('El Nro. de Documento ingresado no existe o no esta en estado menor a D30',16,1)
			RETURN
	END

	SELECT @COUNT=NULL
	
	SELECT @COUNT= COUNT(*)
		FROM DET_DOCUMENTO DD INNER JOIN DOCUMENTO D
		ON DD.DOCUMENTO_ID = D.DOCUMENTO_ID		
		WHERE DD.DOCUMENTO_ID=@Documento_Id AND D.TIPO_OPERACION_ID='ING'
			AND D.STATUS<'D30'

	IF @COUNT =0
	BEGIN
		RAISERROR('El Nro. de Documento ingresado no tiene productos cargados',16,1)
			RETURN
	END
	
	SELECT P.PRODUCTO_ID, UM.DESCRIPCION, DD.CANTIDAD,DD.CAT_LOG_ID_FINAL FROM
	DET_DOCUMENTO DD INNER JOIN PRODUCTO P
	ON DD.PRODUCTO_ID = P.PRODUCTO_ID AND
	DD.CLIENTE_ID=P.CLIENTE_ID	
	INNER JOIN UNIDAD_MEDIDA UM
	ON DD.UNIDAD_ID = UM.UNIDAD_ID
	WHERE DD.DOCUMENTO_ID=@Documento_Id
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[Mob_Descontar_Detalle]
	@DescontarTodo	Char(1),
	@Producto_Id	Varchar(30),
	@Documento_Id	Numeric(20,0)

AS
BEGIN
	SET NOCOUNT ON
	SET XACT_ABORT ON
	DECLARE @CANTIDAD_ORIGINAL AS NUMERIC(20,5)
	DECLARE @COUNT AS NUMERIC(20,0)
	DECLARE @STATUS AS	VARCHAR(3)
	
	IF @DescontarTodo ='S'
		BEGIN
		DELETE FROM DET_DOCUMENTO WHERE DOCUMENTO_ID=@Documento_Id AND PRODUCTO_ID=@Producto_Id	
		END
	ELSE
		BEGIN
		SELECT @CANTIDAD_ORIGINAL= CANTIDAD FROM DET_DOCUMENTO WHERE DOCUMENTO_ID=@Documento_Id AND PRODUCTO_ID=@Producto_Id	
		IF @CANTIDAD_ORIGINAL<1
			BEGIN
				RAISERROR('La cantidad es menor a 1, no se puede descontar 1 unidad',16,1)
			RETURN	
			END
		
		IF @CANTIDAD_ORIGINAL =1 
			BEGIN
				DELETE FROM DET_DOCUMENTO WHERE DOCUMENTO_ID=@Documento_Id AND PRODUCTO_ID=@Producto_Id	
			END
		ELSE
			BEGIN
				UPDATE DET_DOCUMENTO SET CANTIDAD = @CANTIDAD_ORIGINAL-1 
				WHERE DOCUMENTO_ID=@Documento_Id AND PRODUCTO_ID=@Producto_Id	
			END

		END
		
		--Actualización del estado del documento
		SELECT @COUNT=COUNT(*) FROM DET_DOCUMENTO WHERE DOCUMENTO_ID=@Documento_Id
		IF @COUNT=0
		BEGIN
			UPDATE DOCUMENTO SET STATUS='D05' WHERE DOCUMENTO_ID=@Documento_Id
		END
	
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author: <GLOBAL TECH SAS,,Lenin Bueno Escolar>
-- Create date: <Jueves ,15 de Sep de 2011,>
-- Description:	<SP util para validar datos desde un archivo de naves.csv, y luego para el cargue de dicha inforamción en la BDD>
-- =============================================
CREATE PROCEDURE [dbo].[SP_CARGA_NAVES]

@PRM_COD_EMP AS VARCHAR (15),    --Codigo de Emplazamiento
@PRM_COD_DEPOSITO AS VARCHAR(15), --Codigo de Deposito
@PRM_COD_NAVE AS VARCHAR(15),  --Codigo de Nave
@PRM_DESCRIPCION AS VARCHAR(50), --Descripción de Nave
@PRM_TIENE_LAYOUT AS VARCHAR(10), --Tiene Layout
@PRM_DISP_EGR AS VARCHAR(10), --Disponible para Egreso
@PRM_DISP_ING AS VARCHAR(10),  --Disponible para Ingreso
@PRM_DISP_TRANSF AS VARCHAR(10), --Disponible para Transferencias
@PRM_PICKING AS VARCHAR(10), --Nave de Picking
@PRM_ORDEN_ING AS NUMERIC(6,0), --Orden de Ingreso
@PRM_INTERMEDIA AS VARCHAR(10)--Nave Intermedia


AS
BEGIN 

SET NOCOUNT ON;
  DECLARE @NAVE_ID AS NUMERIC(20,0)
  DECLARE @ID_NAV_MAX AS NUMERIC(20,0)
  DECLARE @INFO AS VARCHAR(MAX) 
  DECLARE @ERR AS VARCHAR(MAX) 
  DECLARE @DEPOSITO AS VARCHAR(15)
  SET @INFO  = 'OK'
  SET @ERR = ''
-- Se valida si el código de emplazamiento existe.
IF NOT EXISTS(SELECT * FROM EMPLAZAMIENTO WHERE emplazamiento_id = @PRM_COD_EMP) BEGIN
	SET @ERR = @ERR + 'El código de emplazamiento (' + @PRM_COD_EMP + ') no está registrado en la Base de Datos. ' 
END
-- Se valida si el código del depóstio existe.
IF NOT EXISTS(SELECT * FROM DEPOSITO_EXTERNO WHERE DEPOSITO_EXTERNO_ID = @PRM_COD_DEPOSITO) BEGIN
	SET @ERR = @ERR + 'El código de depósito (' + @PRM_COD_DEPOSITO + ') no está registrado en la Base de Datos. ' 
END 

IF UPPER(@PRM_TIENE_LAYOUT) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_TIENE_LAYOUT = '1'
IF UPPER(@PRM_TIENE_LAYOUT) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_TIENE_LAYOUT = '0'
IF UPPER(@PRM_TIENE_LAYOUT) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0')  SET @ERR= @ERR + 'La columna [Tiene Layout] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

IF UPPER(@PRM_DISP_EGR) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_DISP_EGR = '1'
IF UPPER(@PRM_DISP_EGR) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_DISP_EGR = '0'
IF UPPER(@PRM_DISP_EGR) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0')  SET @ERR= @ERR + 'La columna [Disponible para Egreso] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

IF UPPER(@PRM_DISP_ING) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_DISP_ING = '1'
IF UPPER(@PRM_DISP_ING) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_DISP_ING = '0'
IF UPPER(@PRM_DISP_ING) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0')  SET @ERR= @ERR + 'La columna [Disponible para Ingreso] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

IF UPPER(@PRM_DISP_TRANSF) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_DISP_TRANSF = '1'
IF UPPER(@PRM_DISP_TRANSF) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_DISP_TRANSF = '0'
IF UPPER(@PRM_DISP_TRANSF) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0')  SET @ERR= @ERR + 'La columna [Disponible para Transferencias] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

IF UPPER(@PRM_PICKING) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_PICKING = '1'
IF UPPER(@PRM_PICKING) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_PICKING = '0'
IF UPPER(@PRM_PICKING) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0') SET @ERR= @ERR + 'La columna [Nave de Picking] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

IF UPPER(@PRM_INTERMEDIA) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_INTERMEDIA = '1'
IF UPPER(@PRM_INTERMEDIA) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_INTERMEDIA = '0'
IF UPPER(@PRM_INTERMEDIA) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0') SET @ERR= @ERR + 'La columna [Nave Intermedia] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

IF @ERR = '' 
	BEGIN 
		SELECT TOP 1 @DEPOSITO = ISNULL(DEPOSITO_ID,'') FROM DEPOSITO
		--	El primer campo que me indica si el Código de la Nave está en la Tabla de Nave, sino está se inserta el registro
			IF NOT EXISTS(SELECT * FROM NAVE WHERE NAVE_COD=@PRM_COD_NAVE) 
				BEGIN
					SELECT @ID_NAV_MAX = MAX(NAVE_ID)+1 FROM NAVE
					INSERT INTO NAVE(NAVE_ID,
									EMPLAZAMIENTO_ID,
									DEPOSITO_ID,
									NAVE_COD,
									DESCRIPCION,
									NAVE_DE_UNIDADES,
									NAVE_UNID_ASOCIADA,
									NAVE_TIENE_LAYOUT,
									PRE_INGRESO,
									DISP_LOCATOR,
									PRE_EGRESO,
									DISP_INGRESO,
									DISP_EGRESO,
									DISP_TRANSF,
									PICKING,
									ORDEN_LOCATOR,
									intermedia,
									DEPOSITO_EXTERNO_ID)
							VALUES (@ID_NAV_MAX,
									@PRM_COD_EMP,
									@DEPOSITO,
									@PRM_COD_NAVE,
									ISNULL(@PRM_DESCRIPCION,'NO TIENE'),
									1,
									NULL,
									ISNULL(@PRM_TIENE_LAYOUT,'0'),
									0,
									0,
									0,
									ISNULL(@PRM_DISP_ING,'0'),
									ISNULL(@PRM_DISP_EGR,'0'),
									ISNULL(@PRM_DISP_TRANSF,'0'),
									ISNULL(@PRM_PICKING,'0'),
									@PRM_ORDEN_ING,
									ISNULL(@PRM_INTERMEDIA,'0'),
									@PRM_COD_DEPOSITO)			 
				END 
			ELSE 
				BEGIN
					SELECT @ERR = @ERR + dbo.FX_VALIDA_STOCK_RELACION_PROD(@PRM_COD_NAVE)
					
					IF @ERR = '' 
						BEGIN
							UPDATE	NAVE 
							SET		EMPLAZAMIENTO_ID = @PRM_COD_EMP,
									DEPOSITO_EXTERNO_ID = @PRM_COD_DEPOSITO,
									DESCRIPCION = ISNULL(@PRM_DESCRIPCION,'NO TIENE'),
									NAVE_TIENE_LAYOUT = ISNULL(@PRM_TIENE_LAYOUT,'0'),
									DISP_INGRESO = ISNULL(@PRM_DISP_ING,'0'),
									DISP_EGRESO = ISNULL(@PRM_DISP_EGR,'0'),
									DISP_TRANSF = ISNULL(@PRM_DISP_TRANSF,'0'),
									PICKING = ISNULL(@PRM_PICKING,'0'),
									ORDEN_LOCATOR = @PRM_ORDEN_ING,
									INTERMEDIA = ISNULL(@PRM_INTERMEDIA,'0')
							WHERE	NAVE_COD = @PRM_COD_NAVE
							
							IF ISNULL(LTRIM(RTRIM(@PRM_TIENE_LAYOUT)), '0') = '0'
								BEGIN
									SELECT @NAVE_ID = NAVE_ID FROM NAVE WHERE NAVE_COD = @PRM_COD_NAVE
									
									DELETE POSICION WHERE NAVE_ID = @NAVE_ID
									DELETE NIVEL_NAVE WHERE NAVE_ID = @NAVE_ID
									DELETE COLUMNA_NAVE WHERE NAVE_ID = @NAVE_ID
									DELETE CALLE_NAVE WHERE NAVE_ID = @NAVE_ID
								END
						END
					ELSE 
						BEGIN
							SELECT ERR = @ERR
						END
				END
	END
ELSE 
	BEGIN
		SELECT ERR = @ERR
	END

END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

-- ===================================================================================================================================================
-- Author:		<GLOBALTECH S.A., Lenin Bueno Escolar>
-- Create date: <Viernes, 16 de Septiembre de 2011,>
-- Description:	<SP util para validar datos desde un archivo csv, da la opción de insertar regsitros en las tablas de Nave, Calle, Nivel y Posición>
-- ===================================================================================================================================================
CREATE PROCEDURE [dbo].[SP_CARGA_POSICIONES]
@PRM_COD_EMP AS VARCHAR (15),    --Codigo de Emplazamiento
@PRM_COD_DEPOSITO AS VARCHAR(15), --Codigo de Deposito
@PRM_COD_NAVE AS VARCHAR(15),  --Codigo de Nave
@PRM_COD_CALLE AS VARCHAR(10), --Codigo Calle
@PRM_COD_COLUMN AS VARCHAR(10), --Codigo Columna
@PRM_COD_NIVEL AS VARCHAR(10), -- Codigo Nivel
@PRM_PROFUNDIDAD AS VARCHAR(10),  --Codigo de Nivel que hace referencia a un nivel que es hijo de otro nivel.
@PRM_PESO AS NUMERIC(25,5), --Peso
@PRM_LARGO AS NUMERIC(10,3), --Largo
@PRM_ALTO AS NUMERIC (10,3), --Alto
@PRM_ANCHO AS NUMERIC(10,3), --Ancho
@PRM_PICKING AS VARCHAR(10), --Posición de Picking
@PRM_ORDENPICKING AS NUMERIC(6,0), --Orden der Picking
@PRM_ORDENING AS NUMERIC(6,0), --Orden de Ingreso u orden locator
@PRM_INTERMEDIA AS VARCHAR(10), --Intermedia
@PRM_POS_ABASTECIBLE AS VARCHAR(10), --Posición Abastecible
@PRM_POS_BESTFIT AS VARCHAR(10), -- Posición BestFit
@PRM_ORD_BESTFIT AS NUMERIC(20,0) -- Orden BestFit

AS
BEGIN

  SET NOCOUNT ON;
  DECLARE @ID_NAV AS INT, @ID_CALL AS INT, @ID_COL AS INT, @ID_NIV AS INT
  DECLARE @ERR AS VARCHAR(MAX)

  DECLARE @HIJA_DE AS NUMERIC(20,0)
  DECLARE @ORDEN AS INT
  DECLARE @DEPOSITO AS VARCHAR(15)

  -- Tabla Calle_Nave
  DECLARE @ID_CALL_MAX AS INT
  DECLARE @POS_Y AS INT
  
  -- Tabla Columna_Nave
  DECLARE @ID_COL_MAX AS INT
  
  -- Tabla Nivel_Nave
  DECLARE @ID_NIV_MAX AS INT
  
  -- Tabla Posiciones
  DECLARE @ID_POS_MAX AS INT
  
  DECLARE @CountNivel as integer
  
  DECLARE @PosicionGuion AS INT
  
  SET @ERR  = ''
  IF @PRM_PROFUNDIDAD IS NULL OR RTRIM(LTRIM(@PRM_PROFUNDIDAD))='' SET @PRM_PROFUNDIDAD = NULL
	-- Se valida si el código de emplazamiento existe.
	IF NOT EXISTS(SELECT * FROM EMPLAZAMIENTO WHERE emplazamiento_id = @PRM_COD_EMP) BEGIN
		SET @ERR = @ERR + 'El código de emplazamiento (' + @PRM_COD_EMP + ') no está registrado en la Base de Datos. ' 
	END 
	-- Se valida si el código del depóstio existe.
	IF NOT EXISTS(SELECT * FROM DEPOSITO_EXTERNO WHERE DEPOSITO_EXTERNO_ID = @PRM_COD_DEPOSITO) BEGIN
		SET @ERR = @ERR + 'El código de depósito (' + @PRM_COD_DEPOSITO + ') no está registrado en la Base de Datos. ' 
	END 
	--Se valida si el Código de la Nave está en la Tabla de Nave, sino está se envía un mensaje de error.
	IF NOT EXISTS(SELECT * FROM NAVE WHERE NAVE_COD = @PRM_COD_NAVE) BEGIN
		SET @ERR = @ERR + 'El código de la Nave (' + @PRM_COD_NAVE + ') no está registrado en la Base de Datos. ' 
	END 

	--Se valida si la Nave tiene layout (1), sino tiene se envía un mensaje de error.
	IF EXISTS(SELECT * FROM NAVE WHERE NAVE_COD = @PRM_COD_NAVE AND NAVE_TIENE_LAYOUT=0) BEGIN
		SET @ERR = @ERR + 'La Nave (' + @PRM_COD_NAVE + ') trata de una ubicación de piso sin Layout de posiciones. ' 
	END 

	IF UPPER(@PRM_PICKING) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_PICKING = '1'
	IF UPPER(@PRM_PICKING) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_PICKING = '0'
	IF UPPER(@PRM_PICKING) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0') SET @ERR= @ERR + 'La columna [Nave de Picking] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

	IF UPPER(@PRM_INTERMEDIA) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_INTERMEDIA = '1'
	IF UPPER(@PRM_INTERMEDIA) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_INTERMEDIA = '0'
	IF UPPER(@PRM_INTERMEDIA) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0') SET @ERR= @ERR + 'La colmna [Nave Intermedia] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

	IF UPPER(@PRM_POS_ABASTECIBLE) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_POS_ABASTECIBLE = '1'
	IF UPPER(@PRM_POS_ABASTECIBLE) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_POS_ABASTECIBLE = '0'
	IF UPPER(@PRM_POS_ABASTECIBLE) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0') SET @ERR= @ERR + 'La columna [Posición Abastecible] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

	IF UPPER(@PRM_POS_BESTFIT) IN ('VERDADERO','SI','TRUE','S','V')  SET @PRM_POS_BESTFIT = '1'
	IF UPPER(@PRM_POS_BESTFIT) IN ('FALSO','NO','FALSE','N','F')  SET @PRM_POS_BESTFIT = '0'
	IF UPPER(@PRM_POS_BESTFIT) NOT IN ('VERDADERO','SI','TRUE','S','V','1','FALSO','NO','FALSE','N','F','0') SET @ERR= @ERR + 'La columna [Posición BestFit] solo admite valores lógicos, 1 o 0, Falso 0 Verdadero, Si o No, etc. '

	IF ISNUMERIC(@PRM_PESO)<> 1 OR @PRM_PESO IS NULL SET @ERR = @ERR + 'La columna [Peso] solo admite valores numéricos. '
	IF ISNUMERIC(@PRM_LARGO)<> 1 OR @PRM_LARGO IS NULL SET @ERR = @ERR + 'La columna [Largo] solo admite valores numéricos. '
	IF ISNUMERIC(@PRM_ALTO)<> 1 OR @PRM_ALTO IS NULL SET @ERR = @ERR + 'La columna [Alto] solo admite valores numéricos. '
	IF ISNUMERIC(@PRM_ANCHO)<> 1 OR @PRM_ANCHO IS NULL SET @ERR = @ERR + 'La columna [Ancho] solo admite valores numéricos. '

	IF @ERR = '' 
		BEGIN
    
			-- Se valida si el Código de la Calle está en la Tabla de Calle_Nave, sino está se inserta el registro en dicha tabla
			SELECT @ID_NAV = nave_id from NAVE where NAVE_COD=@PRM_COD_NAVE
      
			
            IF (@PRM_COD_CALLE IS NOT NULL)
                BEGIN -- CALLE_NAVE
                    IF NOT EXISTS(SELECT * FROM calle_nave WHERE calle_cod = @PRM_COD_CALLE AND nave_id = @ID_NAV) 
                        BEGIN
                            SELECT @ID_CALL_MAX = MAX(calle_id)+1 FROM calle_nave
                            IF @ID_CALL_MAX IS NULL
                              BEGIN
                              SET @ID_CALL_MAX=1
                              END
                              
                            SELECT @POS_Y = ISNULL(MAX(pos_y)+500,1000) FROM calle_nave WHERE nave_id = @ID_NAV 
                            INSERT INTO calle_nave(calle_id,
                                                    nave_id,
                                                    calle_cod,
                                                    descripcion,
                                                    pos_horizontal,
                                                    pos_x,
                                                    pos_y,
                                                    modif_layout)
                                            VALUES (@ID_CALL_MAX,
                                                    @ID_NAV,
                                                    @PRM_COD_CALLE,
                                                    'CALLE ' + @PRM_COD_CALLE,
                                                    'H',
                                                    330,
                                                    @POS_Y,
                                                    0)
                        END  
                    -- Se valida si el Código de la Columna está en la Tabla de COLUMNA_NAVE, sino está se inserta el registro
                    SELECT @ID_CALL = calle_id from calle_nave where calle_cod=@PRM_COD_CALLE AND nave_id=@ID_NAV
                    
                    IF (@PRM_COD_COLUMN IS NOT NULL) AND (@PRM_COD_COLUMN <> '')
                        BEGIN -- COLUMNA_NAVE
                            IF NOT EXISTS(SELECT * FROM COLUMNA_NAVE WHERE COLUMNA_COD = @PRM_COD_COLUMN AND NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL)  
                                BEGIN
                                    SELECT @ID_COL_MAX = MAX(COLUMNA_ID) + 1 FROM COLUMNA_NAVE
                                    IF @ID_COL_MAX IS NULL
                                    BEGIN
                                    SET @ID_COL_MAX=1
                                    END
                                    INSERT INTO COLUMNA_NAVE(COLUMNA_ID,
                                                            NAVE_ID,
                                                            CALLE_ID,
                                                            COLUMNA_COD,
                                                            DESCRIPCION,
                                                            MODIF_LAYOUT)
                                                    VALUES (@ID_COL_MAX,
                                                            @ID_NAV,
                                                            @ID_CALL,
                                                            @PRM_COD_COLUMN,	
                                                            'COLUMNA ' + @PRM_COD_COLUMN,
                                                            0)
                                END 
                            -- Se valida si el Código del Nivel está en la Tabla de NIVEL_NAVE, sino está se inserta el registro
                            SELECT @ID_COL = COLUMNA_ID from COLUMNA_NAVE where COLUMNA_COD = @PRM_COD_COLUMN AND NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL 
                            SELECT @PosicionGuion =  CASE WHEN CHARINDEX('-', NIVEL_COD)>0 THEN CHARINDEX('-', NIVEL_COD)-1 ELSE LEN(NIVEL_COD) END  
								FROM NIVEL_NAVE WHERE NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL  AND ORDEN = 1 AND COLUMNA_ID = @ID_COL
                                                                                                                                              
                            SET @HIJA_DE = (CASE 
                                                WHEN NOT @PRM_PROFUNDIDAD IS NULL 
                                                THEN (SELECT NIVEL_ID 
                                                      FROM NIVEL_NAVE 
                                                      WHERE NIVEL_COD = (SELECT NIVEL_COD
                                                                        FROM NIVEL_NAVE
                                                                        WHERE NAVE_ID = @ID_NAV
                                                                        AND CALLE_ID = @ID_CALL
                                                                        AND COLUMNA_ID = @ID_COL
                                                                        --AND SUBSTRING(NIVEL_COD, 1, (LEN(NIVEL_COD) - (CASE WHEN CHARINDEX('-', NIVEL_COD)>0 THEN CHARINDEX('-', NIVEL_COD)+1 ELSE CHARINDEX('-', NIVEL_COD)END)))
                                                                        --AND SUBSTRING(NIVEL_COD, 1, CHARINDEX('-', NIVEL_COD)-1)= @PRM_COD_NIVEL
                                                                        AND SUBSTRING(NIVEL_COD,1,@PosicionGuion) = @PRM_COD_NIVEL
                                                                        AND ORDEN = 1)
                                                      AND NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL 
                                                      AND COLUMNA_ID = @ID_COL) 
                                                ELSE NULL 
                                            END )
                            
                            IF (@PRM_COD_NIVEL IS NOT NULL) AND (@PRM_COD_NIVEL <> '')                                
                                BEGIN -- NIVEL_NAVE
                                    SELECT @ID_NIV_MAX = MAX(NIVEL_ID)+1 FROM NIVEL_NAVE
                                    IF @ID_NIV_MAX IS NULL
                                    BEGIN
                                    SET @ID_NIV_MAX=1
                                    END
                                    IF NOT EXISTS (
                                                    SELECT * FROM NIVEL_NAVE 
                                                    WHERE NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL AND COLUMNA_ID = @ID_COL 
                                                    AND NIVEL_COD LIKE @PRM_COD_NIVEL + '%'
                                                    -- AND HIJA_DE IS NULL
                                                    ) 
                                        BEGIN
                                            -- No existe Nivel
                                            BEGIN TRY 
                                                SELECT @ORDEN=COUNT(*)+1 FROM NIVEL_NAVE WHERE HIJA_DE = @HIJA_DE AND NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL AND COLUMNA_ID = @ID_COL
                                                
                                                INSERT INTO NIVEL_NAVE (NIVEL_ID,
                                                                        NAVE_ID,
                                                                        CALLE_ID,
                                                                        COLUMNA_ID,
                                                                        NIVEL_COD,
                                                                        DESCRIPCION,
                                                                        ORDEN,
                                                                        MODIF_LAYOUT,
                                                                        HIJA_DE)
                                                                VALUES (@ID_NIV_MAX,
                                                                        @ID_NAV,
                                                                        @ID_CALL,
                                                                        @ID_COL,
                                                                        (CASE WHEN @PRM_PROFUNDIDAD IS NULL THEN @PRM_COD_NIVEL ELSE @PRM_COD_NIVEL +'-'+@PRM_PROFUNDIDAD END ),
                                                                        'NIVEL ' + @PRM_COD_NIVEL,
                                                                        (CASE WHEN @HIJA_DE IS NULL THEN @ORDEN ELSE 0 END ),
                                                                        0,
                                                                        (CASE 
                                                                            WHEN @PRM_PROFUNDIDAD IS NULL 
                                                                                THEN NULL 
                                                                            ELSE (CASE 
                                                                                    WHEN @HIJA_DE IS NULL 
                                                                                        THEN @ID_NIV_MAX 
                                                                                    ELSE @HIJA_DE 
                                                                                    END 
                                                                                    ) 
                                                                            END 
                                                                        )
                                                                        )
                        
                                            END TRY
                                            BEGIN CATCH
                                                PRINT ''
                                            END CATCH
                                        END
                                    ELSE
                                        BEGIN
                                            SELECT @ERR = dbo.FX_VALIDA_STOCK_RELACION_POSIC(@PRM_COD_NAVE, @PRM_COD_CALLE, @PRM_COD_COLUMN, @PRM_COD_NIVEL, @PRM_PROFUNDIDAD)
                                            IF @ERR = ''
                                                BEGIN
                                                    IF EXISTS(SELECT * FROM NIVEL_NAVE 
                                                              WHERE NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL AND COLUMNA_ID = @ID_COL 
                                                              AND NIVEL_COD = @PRM_COD_NIVEL
                                                              AND HIJA_DE IS NULL
                                                              ) 
                                                    AND @PRM_PROFUNDIDAD = '1'
                                                        BEGIN
                                                            -- Existe Nivel sin Profundidad
                                                            UPDATE NIVEL_NAVE
                                                            SET NIVEL_COD = CASE WHEN @PRM_PROFUNDIDAD IS NULL 
                                                                                THEN @PRM_COD_NIVEL
                                                                                ELSE @PRM_COD_NIVEL + '-' + @PRM_PROFUNDIDAD
                                                                            END ,
                                                                HIJA_DE = @HIJA_DE 
                                                            WHERE NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL AND COLUMNA_ID = @ID_COL 
                                                            AND (NIVEL_COD = @PRM_COD_NIVEL OR NIVEL_COD = @PRM_COD_NIVEL + '-' + @PRM_PROFUNDIDAD) 
                                                            AND HIJA_DE IS NULL
                                                        END
                                                    ELSE
                                                        BEGIN
                                                            IF @PRM_PROFUNDIDAD IS NOT NULL
                                                                BEGIN
                                                                    SELECT @CountNivel = COUNT(*) FROM NIVEL_NAVE 
                                                                    WHERE NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL AND COLUMNA_ID = @ID_COL 
                                                                    AND NIVEL_COD = @PRM_COD_NIVEL + '-' + @PRM_PROFUNDIDAD
                                                                END
                                                            ELSE
                                                                BEGIN
                                                                    SELECT @CountNivel = COUNT(*) FROM NIVEL_NAVE 
                                                                    WHERE NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL AND COLUMNA_ID = @ID_COL 
                                                                    AND SUBSTRING(NIVEL_COD, 1, (LEN(NIVEL_COD) - CHARINDEX('-', NIVEL_COD))) = @PRM_COD_NIVEL
                                                                END
                                                            
                                                            IF @CountNivel = 0
                                                                BEGIN
                                                                    INSERT INTO NIVEL_NAVE (NIVEL_ID,
                                                                                            NAVE_ID,
                                                                                            CALLE_ID,
                                                                                            COLUMNA_ID,
                                                                                            NIVEL_COD,
                                                                                            DESCRIPCION,
                                                                                            ORDEN,
                                                                                            MODIF_LAYOUT,
                                                                                            HIJA_DE)
                                                                                    VALUES (@ID_NIV_MAX,
                                                                                            @ID_NAV,
                                                                                            @ID_CALL,
                                                                                            @ID_COL,
                                                                                            (CASE WHEN @PRM_PROFUNDIDAD IS NULL THEN @PRM_COD_NIVEL ELSE @PRM_COD_NIVEL +'-'+@PRM_PROFUNDIDAD END ),
                                                                                            'NIVEL ' + @PRM_COD_NIVEL,
                                                                                            (CASE WHEN @HIJA_DE IS NULL THEN @ORDEN ELSE 0 END ),
                                                                                            0,
                                                                                            (CASE 
                                                                                                WHEN @PRM_PROFUNDIDAD IS NULL 
                                                                                                    THEN NULL 
                                                                                                ELSE (CASE 
                                                                                                        WHEN @HIJA_DE IS NULL 
                                                                                                            THEN @ID_NIV_MAX 
                                                                                                        ELSE @HIJA_DE 
                                                                                                        END 
                                                                                                        ) 
                                                                                                END 
                                                                                            )
                                                                                            )
                                                                END
                                                            IF @CountNivel > 1
                                                                BEGIN
                                                                    SET @ERR = 'Este nivel tiene profundidades y no se pueden eliminar de manera automÃÆÃÂ¡tica'
                                                                    SELECT @ERR ERR
                                                                END
                                                        END
                                                END
                                            ELSE
                                                BEGIN
                                                    SELECT @ERR ERR
                                                END
                                        END
                                    -- Paso final para el cargue de la información a la tabla de Posiciones  
                                    IF NOT @PRM_PROFUNDIDAD IS NULL 
                                        BEGIN
                                            SET @PRM_COD_NIVEL = @PRM_COD_NIVEL + '-' + @PRM_PROFUNDIDAD
                                        END
                                    
                                    SELECT DISTINCT @ID_NIV = NIVEL_ID, @HIJA_DE = HIJA_DE, @ORDEN = ORDEN FROM NIVEL_NAVE 
                                    WHERE NIVEL_COD = @PRM_COD_NIVEL AND NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL AND COLUMNA_ID = @ID_COL
                                    
                                    IF NOT EXISTS(SELECT * FROM POSICION WHERE NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL AND COLUMNA_ID = @ID_COL AND NIVEL_ID = @ID_NIV) 
                                      AND @ERR = ''
                                        BEGIN 
                                           SELECT @ID_POS_MAX = MAX(POSICION_ID)+1 FROM POSICION   
                                           IF @ID_POS_MAX IS NULL
                                           BEGIN
                                           SET @ID_POS_MAX=1
                                           END
                                           INSERT INTO POSICION (POSICION_ID,
                                                                 NAVE_ID,
                                                                 CALLE_ID,
                                                                 COLUMNA_ID,
                                                                 NIVEL_ID,
                                                                 POSICION_COD,
                                                                 UNIDAD_VOLUMEN,
                                                                 PESO,
                                                                 UNIDAD_PESO,
                                                                 POS_VACIA,
                                                                 POS_LOCKEADA,
                                                                 POS_COMPLETA,
                                                                 MODIF_LAYOUT,
                                                                 LCK_TIPO_OPERACION,
                                                                 LARGO,
                                                                 ALTO,
                                                                 ANCHO,
                                                                 PICKING,
                                                                 PENETRABLE,
                                                                 HIJA_DE,
                                                                 ORDEN,
                                                                 ORDEN_PICKING,
                                                                 VOLUMEN,
                                                                 ORDEN_LOCATOR,
                                                                 intermedia,
                                                                 ABASTECIBLE,
                                                                 BESTFIT,
                                                                 Orden_BestFit)																 
                                                         VALUES (@ID_POS_MAX,
                                                                 @ID_NAV,
                                                                 @ID_CALL,
                                                                 @ID_COL,
                                                                 @ID_NIV,	
                                                                 @PRM_COD_NAVE + '-' + @PRM_COD_CALLE + '-' + @PRM_COD_COLUMN + '-' + @PRM_COD_NIVEL,
                                                                 'M3',
                                                                 @PRM_PESO,
                                                                 'KG',
                                                                 '1',
                                                                 '0',
                                                                 '0',
                                                                 '0',	
                                                                 '0',							 
                                                                 @PRM_LARGO,
                                                                 @PRM_ALTO,
                                                                 @PRM_ANCHO,
                                                                 @PRM_PICKING,
                                                                 (CASE WHEN @PRM_PROFUNDIDAD IS NULL 
                                                                    THEN '0' 
                                                                    ELSE '1' 
                                                                    END 
                                                                 ),
                                                                 (CASE WHEN @PRM_PROFUNDIDAD IS NULL THEN NULL ELSE ISNULL(@HIJA_DE, @ID_POS_MAX) END ),
                                                                 (CASE WHEN @PRM_PROFUNDIDAD IS NULL THEN NULL ELSE @PRM_PROFUNDIDAD END ),
                                                                 @PRM_ORDENPICKING,
                                                                 @PRM_LARGO * @PRM_ALTO * @PRM_ANCHO,
                                                                 @PRM_ORDENING,
                                                                 @PRM_INTERMEDIA,
                                                                 @PRM_POS_ABASTECIBLE,
                                                                 @PRM_POS_BESTFIT,
                                                                 @PRM_ORD_BESTFIT)
                                        END 
                                    ELSE 
                                        BEGIN
                                            -- SET @ERR='En este Registro los datos de Nave, Calle, Columna y Nivel ya están ingresados en la Base de Datos, No se pueden duplicar.'
                                            -- SELECT ERR = @ERR 
                                            IF @ERR = ''
                                                BEGIN
                                                    UPDATE POSICION 
                                                    SET POSICION_COD = @PRM_COD_NAVE + '-' + @PRM_COD_CALLE + '-' + @PRM_COD_COLUMN + '-' + @PRM_COD_NIVEL,
                                                        PENETRABLE = (CASE WHEN @PRM_PROFUNDIDAD IS NULL 
                                                                        THEN '0' 
                                                                        ELSE '1' 
                                                                        END 
                                                                      ),
                                                        HIJA_DE = CASE WHEN @PRM_PROFUNDIDAD IS NULL 
                                                                    THEN NULL 
                                                                    ELSE ISNULL(@HIJA_DE, @ID_POS_MAX)
                                                                  END ,
                                                        ORDEN = (CASE WHEN @PRM_PROFUNDIDAD IS NULL THEN NULL ELSE @PRM_PROFUNDIDAD END )
                                                    WHERE NAVE_ID = @ID_NAV AND CALLE_ID = @ID_CALL AND COLUMNA_ID = @ID_COL AND NIVEL_ID = @ID_NIV
                                                END
                                        END
                                END -- NIVEL_NAVE
                        END -- COLUMNA_NAVE
                END -- CALLE_NAVE
		END 
	ELSE 
		BEGIN
			SELECT ERR = @ERR  
		END
END
GO

IF @@ERROR <> 0
BEGIN
   IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
   INSERT INTO #tmpErrors (Error) SELECT 1
   BEGIN TRANSACTION
END
GO

IF @@TRANCOUNT > 0
BEGIN
   IF EXISTS (SELECT * FROM #tmpErrors)
       ROLLBACK TRANSACTION
   ELSE
       COMMIT TRANSACTION
END
GO

DROP TABLE #tmpErrors
GO